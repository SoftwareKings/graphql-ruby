#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "lib/graphql/language/lex.rex".
#++

require 'racc/parser'
class GraphQL::Language::RaccParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/[\s\n,]+/))
        ;

      when (text = @ss.scan(/\#[^\n\r]*/))
        ;

      when (text = @ss.scan(/\{/))
         action { [:RCURLY, text] }

      when (text = @ss.scan(/\}/))
         action { [:LCURLY, text] }

      when (text = @ss.scan(/\(/))
         action { [:RPAREN, text] }

      when (text = @ss.scan(/\)/))
         action { [:LPAREN, text] }

      when (text = @ss.scan(/\[/))
         action { [:RBRACKET, text] }

      when (text = @ss.scan(/\]/))
         action { [:LBRACKET, text] }

      when (text = @ss.scan(/\:/))
         action { [:COLON, text] }

      when (text = @ss.scan(/-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?/))
         action { [:FLOAT, text] }

      when (text = @ss.scan(/-?(0|[1-9][0-9]*)/))
         action { [:INT, text] }

      when (text = @ss.scan(/\"/))
         action { self.state = :STRING; self.string_buffer = ""; nil }

      when (text = @ss.scan(/true/))
         action { [:TRUE, text] }

      when (text = @ss.scan(/false/))
         action { [:FALSE, text] }

      when (text = @ss.scan(/\$/))
         action { [:VAR_SIGN, text] }

      when (text = @ss.scan(/@/))
         action { [:DIR_SIGN, text] }

      when (text = @ss.scan(/\.\.\./))
         action { [:ELLIPSIS, text] }

      when (text = @ss.scan(/on/))
         action { [:ON, text] }

      when (text = @ss.scan(/fragment/))
         action { [:FRAGMENT, text] }

      when (text = @ss.scan(/=/))
         action { [:EQUALS, text] }

      when (text = @ss.scan(/!/))
         action { [:BANG, text] }

      when (text = @ss.scan(/[_A-Za-z][_0-9A-Za-z]*/))
         action { [:IDENTIFIER, text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    when :STRING
      case
      when (text = @ss.scan(/[^\x00-\x1f\\\x22]+/))
         action { self.string_buffer << text; nil }

      when (text = @ss.scan(/\\"/))
         action { self.string_buffer << '"'.freeze; nil }

      when (text = @ss.scan(/\\n/))
         action { self.string_buffer << "\n".freeze; nil }

      when (text = @ss.scan(/\\r/))
         action { self.string_buffer << "\r".freeze; nil }

      when (text = @ss.scan(/\\b/))
         action { self.string_buffer << "\b".freeze; nil }

      when (text = @ss.scan(/\\t/))
         action { self.string_buffer << "\t".freeze; nil }

      when (text = @ss.scan(/\\f/))
         action { self.string_buffer << "\f".freeze; nil }

      when (text = @ss.scan(/\\u[\dA-Fa-f]{4}/))
         action { self.string_buffer << text.gsub(UTF_8, &UTF_8_REPLACE); nil }

      when (text = @ss.scan(/\"/))
         action { self.state = nil; str = self.string_buffer; [:STRING, str] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

attr_accessor :string_buffer
UTF_8 = /\\u[\da-f]{4}/i
UTF_8_REPLACE = -> (m) { [m[-4..-1].to_i(16)].pack('U') }
end # class
