#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 344)

def initialize(query_string)
  @query_string = query_string
end

def parse_document
  @document ||= begin
    @tokens ||= GraphQL::Language::Lexer.tokenize(@query_string)
    if @tokens.none?
      make_node(:Document, definitions: [])
    else
      do_parse
    end
  end
end

def self.parse(query_string)
  self.new(query_string).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$"
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,    12,   138,    81,   138,   212,   138,   212,   138,
   138,    32,    53,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
    81,    60,    81,    81,    78,    63,   138,    77,   180,    74,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,    70,    60,    10,
    11,    12,   128,   100,    71,    73,    85,    83,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,    81,    81,   175,    91,    81,   176,
   213,    81,   177,    81,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,    10,    11,    12,    81,    81,   175,   100,    81,   176,
    81,    81,   177,    13,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,    10,    11,    12,   117,    81,   175,   121,   122,   176,
   199,   123,   177,   124,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,    10,    11,    12,   125,    13,   175,    13,    78,   176,
   136,    78,   177,   143,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,    10,    11,    12,   162,   163,   175,    81,    13,   176,
    13,   125,   177,   186,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,    10,    11,    12,    81,   190,    13,   207,   210,   112,
   217,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   112,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   103,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   112,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   134,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   112,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   192,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   193,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   112,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   202,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   206,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   112,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   215,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,    10,    11,    12,   nil,   nil,   nil,    13,   nil,
   nil,    18,    25,    26,   115,    27,    28,    29,    30,    31,
   nil,    14,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   152,    38,    39,    40,    41,
    42,    43,    44,    45,    46,   150,   151,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   189,
   152,    38,    39,    40,    41,    42,    43,    44,    45,    46,
   150,   151,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,    18,    25,    26,   nil,
    27,    28,    29,    30,    31,   nil,    14 ]

racc_action_check = [
    13,    13,    13,   196,   219,   209,   196,   111,   209,   218,
   114,     1,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    54,    54,    54,
   111,    13,   218,   114,    59,    18,   140,    59,   140,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    60,    60,    60,    31,    54,    63,
    63,    63,    98,    98,    32,    34,    61,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,   200,   200,   200,    60,    64,   200,    65,    66,   200,
   200,    67,   200,    68,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   212,   212,   212,    69,    72,   212,    73,    76,   212,
    79,    82,   212,    84,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   176,   176,   176,    88,    90,   176,    92,    93,   176,
   176,    94,   176,    95,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   136,   136,   136,    96,    97,   136,   101,   102,   136,
   106,   108,   136,   118,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   217,   217,   217,   126,   130,   217,   133,   139,   217,
   141,   145,   217,   149,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,    83,    83,    83,   155,   158,   164,   183,   194,    83,
   205,   nil,   nil,   nil,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,   143,   143,
   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   147,   147,   147,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,    85,    85,    85,   nil,   nil,   nil,   nil,   nil,
    85,   nil,   nil,   nil,   nil,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,   117,
   117,   117,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   120,   120,   120,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   121,   121,   121,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   122,   122,   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   124,   124,   124,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   125,   125,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,    78,    78,    78,   nil,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    81,    81,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    26,    26,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,   207,   207,   207,   nil,   nil,   nil,   nil,   nil,
   207,   nil,   nil,   nil,   nil,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   207,   210,
   210,   210,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,    27,    27,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    27,    28,    28,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    29,    29,    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    29,    29,    29,    30,    30,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    30,    30,    30,   100,   100,   100,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,    70,    70,    70,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,     8,     8,
     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,   104,   104,   104,   nil,   104,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,    14,    14,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,   112,
   112,   112,   nil,   nil,   nil,   nil,   nil,   112,   nil,   nil,
   nil,   nil,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,    77,    77,    77,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,   160,   160,   160,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   161,   161,   161,   nil,   161,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   162,   162,   162,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   163,   163,   163,   nil,   nil,   nil,
   nil,   nil,   163,   nil,   nil,   nil,   nil,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   175,   175,   175,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   177,   177,
   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   182,   182,   182,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,    91,    91,    91,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,   186,
   186,   186,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   190,   190,   190,   nil,
   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,    25,    25,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
   203,   203,   203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,     0,     0,     0,
   nil,   nil,    86,    86,    86,   nil,   nil,   nil,     0,   nil,
   nil,     0,     0,     0,    86,     0,     0,     0,     0,     0,
   nil,     0,   123,   123,   123,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   157,   157,   157,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,     3,     3,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,     3,     3,     3,   nil,
     3,     3,     3,     3,     3,   nil,     3 ]

racc_action_pointer = [
  1255,    11,   nil,  1330,   nil,   nil,   nil,   nil,   796,   nil,
   nil,   nil,   nil,    -2,   850,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,  1201,   553,   634,   661,   688,
   715,    25,    64,   nil,    60,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,    29,
    52,    51,   nil,    57,    53,    68,    56,    59,    61,    82,
   769,   nil,    83,   110,   nil,   nil,    86,   904,   499,    88,
   nil,   526,    89,   229,   110,   310,  1260,   nil,   136,   nil,
   113,  1120,   134,   136,   138,   140,   169,   162,    56,   nil,
   742,   164,   173,   nil,   823,   nil,   172,   nil,   176,   nil,
   nil,    -2,   877,   nil,     1,   nil,   nil,   337,   170,   nil,
   364,   391,   418,  1280,   445,   472,   189,   nil,   nil,   nil,
   197,   nil,   nil,   175,   nil,   nil,   169,   nil,   nil,   195,
    27,   197,   nil,   256,   nil,   206,   nil,   283,   nil,   179,
   nil,   nil,   nil,   nil,   nil,   202,   nil,  1305,   227,   nil,
   931,   958,   985,  1012,   223,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1039,   139,  1066,   nil,   nil,
   nil,   nil,  1093,   229,   nil,   nil,  1147,   nil,   nil,   nil,
  1174,   nil,   nil,   nil,   204,   nil,    -6,   nil,   nil,   nil,
    79,   nil,   nil,  1228,   nil,   232,   nil,   580,   nil,    -4,
   607,   nil,   109,   nil,   nil,   nil,   nil,   199,     0,   -28,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -134,  -134,    -1,    -2,    -3,    -5,    -6,    -7,   -13,    -9,
   -10,   -11,   -12,  -134,   -98,  -100,  -101,  -102,  -134,  -107,
  -108,  -109,  -110,  -111,  -112,  -134,  -134,  -134,  -134,  -134,
  -134,  -134,  -134,    -4,   -15,   -14,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -25,  -134,   -29,   -31,   -32,   -33,   -63,
   -89,  -134,   -99,  -134,   -89,  -115,   -89,   -89,   -89,   -89,
  -134,   225,   -89,  -134,   -26,   -30,   -89,  -134,  -134,   -90,
   -91,  -134,   -89,  -134,  -134,  -134,  -134,  -104,  -134,  -113,
   -89,  -134,  -134,  -134,  -134,  -134,  -120,  -134,  -134,   -17,
  -134,   -27,   -63,   -64,  -134,   -66,  -134,   -92,   -63,   -94,
   -20,   -89,  -134,   -96,   -89,  -103,  -105,  -134,  -134,   -58,
  -116,  -134,  -134,  -134,  -134,  -134,  -134,    -8,   -16,   -18,
  -134,   -28,   -34,   -89,   -65,   -67,  -134,   -93,   -21,  -134,
  -134,  -134,  -106,  -134,   -59,  -120,  -123,  -134,  -126,  -128,
   -53,   -54,   -55,   -56,   -57,   -89,   -61,  -134,  -134,  -118,
  -134,  -134,  -134,  -134,   -27,   -68,   -69,   -70,   -71,   -72,
   -73,   -74,   -75,   -76,   -77,  -134,  -134,  -134,   -88,   -95,
   -22,   -97,  -134,  -134,  -124,  -125,  -134,   -60,   -62,  -129,
  -134,  -119,  -130,  -121,  -131,  -132,   -23,   -35,   -78,   -79,
  -134,   -81,   -83,  -134,   -85,  -134,  -114,  -134,  -127,   -23,
  -134,   -19,  -134,   -80,   -82,   -84,   -86,  -134,   -89,   -89,
  -133,   -24,   -87,  -122,  -117 ]

racc_goto_table = [
     8,    62,   111,     8,   114,   132,   126,   211,    35,    76,
   184,   165,    99,    59,   194,   156,    55,   147,   105,   154,
   219,     4,   160,   161,    33,    64,    65,    66,    67,    68,
    69,   140,   154,   155,    84,     2,   204,   129,    89,   182,
    92,    93,    94,    95,   135,   184,    97,    82,   113,   188,
   101,   201,   133,   154,    59,   183,   109,    75,   137,     3,
    87,   127,   216,    88,   118,   131,    34,   155,   197,    72,
    96,    98,   154,   191,   191,   214,    54,   102,   106,   120,
   157,   108,   196,   116,   104,   139,    88,   221,   141,   200,
   203,   119,   222,   107,    61,    86,   154,    90,   149,     1,
   130,   nil,   nil,   179,   106,   181,   nil,   164,   154,   209,
   nil,   nil,   nil,   154,   nil,   nil,   nil,   142,   nil,   nil,
   144,   145,   148,   153,   158,   158,   218,   nil,   131,   187,
   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,   nil,
   nil,   nil,   nil,   145,   nil,   nil,   nil,   145,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,
   158,   158,   195,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   198,   153,   205,   nil,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   208,   nil,   nil,   nil,
   nil,   nil,   223,   224,   nil,   nil,   nil,   nil,   nil,   nil,
   153,   nil,   nil,   205,   nil,   nil,   nil,   nil,   nil,   nil,
   220,   nil,   153,   nil,   nil,   nil,   nil,   153 ]

racc_goto_check = [
     8,    26,    16,     8,    16,    20,    59,    17,    13,    25,
    60,    18,    15,    13,    62,    30,    21,    56,    33,    27,
    17,     4,    58,    58,     4,    13,    13,    13,    13,    13,
    13,    16,    27,    28,    11,     2,    40,    15,    11,    56,
    11,    11,    11,    11,    33,    60,    11,    26,    12,    30,
    11,    18,    25,    27,    13,    59,    11,    21,    25,     3,
    48,    12,    40,     8,    11,    12,     9,    28,    20,    10,
    13,    14,    27,    57,    57,    18,    19,    13,    13,    29,
    31,    13,    16,    48,    32,    11,     8,    18,    11,    38,
    39,    13,    18,    42,    43,    47,    27,    55,    61,     1,
    13,   nil,   nil,    12,    13,    12,   nil,    11,    27,    16,
   nil,   nil,   nil,    27,   nil,   nil,   nil,    13,   nil,   nil,
    13,    13,    13,     8,    13,    13,    16,   nil,    12,    11,
   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,
    13,    13,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    13,     8,    13,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,    11,    11,   nil,   nil,   nil,   nil,   nil,   nil,
     8,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,     8,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,    99,    35,    59,    21,   nil,   nil,   nil,     0,    58,
    35,   -26,   -36,     0,    -2,   -61,   -81,  -189,  -125,    63,
   -96,     3,   nil,   nil,   nil,   -50,   -13,  -104,   -90,   -12,
  -108,   -43,     6,   -60,   nil,   nil,   nil,   nil,   -87,   -87,
  -141,   nil,    14,    80,   nil,   nil,   nil,    32,    -3,   nil,
   nil,   nil,   nil,   nil,   nil,    32,  -104,   -87,  -102,   -90,
  -137,   -24,  -148 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,    51,   nil,
   nil,   nil,     9,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    56,    57,    58,   nil,    36,    52,   178,   nil,
   nil,   nil,   nil,   nil,   171,   172,   173,   174,   nil,   nil,
   nil,    79,    80,   nil,    15,    16,    17,   nil,   nil,    19,
    20,    21,    22,    23,    24,   nil,   nil,   159,   nil,   nil,
   146,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  2, 38, :_reduce_4,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  5, 40, :_reduce_8,
  1, 40, :_reduce_9,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  0, 44, :_reduce_13,
  1, 44, :_reduce_none,
  0, 45, :_reduce_15,
  3, 45, :_reduce_16,
  1, 49, :_reduce_17,
  2, 49, :_reduce_18,
  5, 50, :_reduce_19,
  1, 51, :_reduce_20,
  2, 51, :_reduce_21,
  3, 51, :_reduce_22,
  0, 52, :_reduce_23,
  2, 52, :_reduce_24,
  2, 47, :_reduce_25,
  3, 47, :_reduce_26,
  0, 55, :_reduce_27,
  1, 55, :_reduce_28,
  1, 54, :_reduce_29,
  2, 54, :_reduce_30,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  4, 57, :_reduce_34,
  6, 57, :_reduce_35,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 64, :_reduce_58,
  2, 64, :_reduce_59,
  2, 65, :_reduce_60,
  1, 66, :_reduce_61,
  2, 66, :_reduce_62,
  0, 60, :_reduce_63,
  2, 60, :_reduce_64,
  3, 60, :_reduce_65,
  1, 67, :_reduce_66,
  2, 67, :_reduce_67,
  3, 68, :_reduce_68,
  1, 53, :_reduce_69,
  1, 53, :_reduce_70,
  1, 53, :_reduce_71,
  1, 53, :_reduce_72,
  1, 53, :_reduce_73,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  2, 69, :_reduce_78,
  2, 70, :_reduce_79,
  3, 70, :_reduce_80,
  1, 73, :_reduce_81,
  2, 73, :_reduce_82,
  2, 71, :_reduce_83,
  3, 71, :_reduce_84,
  1, 74, :_reduce_85,
  2, 74, :_reduce_86,
  3, 75, :_reduce_87,
  1, 72, :_reduce_88,
  0, 46, :_reduce_89,
  1, 46, :_reduce_none,
  1, 76, :_reduce_91,
  2, 76, :_reduce_92,
  3, 77, :_reduce_93,
  3, 58, :_reduce_94,
  5, 59, :_reduce_95,
  3, 59, :_reduce_96,
  6, 41, :_reduce_97,
  0, 78, :_reduce_98,
  1, 78, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  4, 79, :_reduce_103,
  1, 82, :_reduce_none,
  2, 82, :_reduce_105,
  3, 83, :_reduce_106,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  3, 84, :_reduce_113,
  7, 85, :_reduce_114,
  0, 90, :_reduce_115,
  2, 90, :_reduce_116,
  5, 92, :_reduce_117,
  1, 93, :_reduce_118,
  2, 93, :_reduce_119,
  0, 94, :_reduce_120,
  3, 94, :_reduce_121,
  5, 95, :_reduce_122,
  1, 91, :_reduce_123,
  2, 91, :_reduce_124,
  6, 86, :_reduce_125,
  1, 96, :_reduce_126,
  3, 96, :_reduce_127,
  5, 87, :_reduce_128,
  6, 88, :_reduce_129,
  6, 89, :_reduce_130,
  6, 81, :_reduce_131,
  1, 97, :_reduce_132,
  3, 97, :_reduce_133 ]

racc_reduce_n = 134

racc_shift_n = 225

racc_token_table = {
  false => 0,
  :error => 1,
  :QUERY => 2,
  :MUTATION => 3,
  :SUBSCRIPTION => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :VAR_SIGN => 7,
  :COLON => 8,
  :BANG => 9,
  :LBRACKET => 10,
  :RBRACKET => 11,
  :EQUALS => 12,
  :LCURLY => 13,
  :RCURLY => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :DIR_SIGN => 32,
  :ELLIPSIS => 33,
  :PIPE => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "LCURLY",
  "RCURLY",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "DIR_SIGN",
  "ELLIPSIS",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "operation_definition",
  "fragment_definition",
  "type_system_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "input_value",
  "selection_list",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "name_list",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "variable",
  "list_value",
  "object_value",
  "enum_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "implements_opt",
  "field_definition_list",
  "input_value_definition",
  "input_value_definition_list",
  "arguments_definitions_opt",
  "field_definition",
  "union_members",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_8(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_9(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_13(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_15(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_17(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_18(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_19(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_22(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_23(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_24(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_26(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_27(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_28(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_29(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_30(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_34(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_35(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_58(val, _values, result)
     return [make_node(:TypeName, name: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_59(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_60(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_61(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_62(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_63(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_64(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_65(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_66(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_67(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_68(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_69(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_70(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_71(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_72(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_73(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_78(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_79(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_80(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_81(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_82(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_83(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_84(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_85(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_86(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_87(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_88(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_89(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_91(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_92(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_93(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_94(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_95(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_96(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_97(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 246)
  def _reduce_98(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_103(val, _values, result)
     return make_node(:SchemaDefinition, val[2]) 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_105(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_106(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_113(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_114(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[1], interfaces: val[2], directives: val[3], fields: val[5], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_115(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_116(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_117(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_118(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_119(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_120(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_121(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 298)
  def _reduce_122(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_123(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_124(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_125(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_126(val, _values, result)
     return [make_node(:TypeName, name: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_127(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_128(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_129(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_130(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_131(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_132(val, _values, result)
     return [val[0].to_s] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_133(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
