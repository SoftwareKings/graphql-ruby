#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 343)

def initialize(query_string)
  @query_string = query_string
end

def parse_document
  @document ||= begin
    @tokens ||= GraphQL::Language::Lexer.tokenize(@query_string)
    if @tokens.none?
      make_node(:Document, definitions: [])
    else
      do_parse
    end
  end
end

def self.parse(query_string)
  self.new(query_string).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$"
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,    12,    77,   208,   208,    76,   209,   208,   208,
   220,    13,   209,   184,    18,    25,    26,   138,    27,    28,
    29,    30,    80,    14,    10,    11,    12,    80,    77,    10,
    11,    12,    31,   125,    99,    13,   133,    77,    18,    25,
    26,   112,    27,    28,    29,    30,    13,    14,    10,    11,
    12,    10,    11,    12,    13,   157,    31,   158,    80,   122,
    73,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    10,    11,    12,    13,    59,    13,
   121,   122,   120,   180,    80,   119,    52,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    10,    11,    12,    80,    59,   118,    80,   114,    13,    13,
    80,    80,    80,    82,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    10,    11,    12,    80,
    99,   170,   203,    80,   171,   211,    80,   172,   206,   147,
    38,    39,    40,    41,    42,    43,    44,    45,   145,   146,
   164,   165,   161,   162,   163,    10,    11,    12,    80,    80,
   170,    80,    90,   171,   215,    80,   172,    84,   147,    38,
    39,    40,    41,    42,    43,    44,    45,   145,   146,   164,
   165,   161,   162,   163,    10,    11,    12,    72,    70,   170,
    69,    62,   171,   195,    32,   172,    80,   147,    38,    39,
    40,    41,    42,    43,    44,    45,   145,   146,   164,   165,
   161,   162,   163,    10,    11,    12,   nil,   nil,   170,   nil,
   nil,   171,   nil,   nil,   172,   nil,   147,    38,    39,    40,
    41,    42,    43,    44,    45,   145,   146,   164,   165,   161,
   162,   163,    10,    11,    12,   nil,   nil,   170,   nil,   nil,
   171,   nil,   nil,   172,   nil,   147,    38,    39,    40,    41,
    42,    43,    44,    45,   145,   146,   164,   165,   161,   162,
   163,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   202,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   213,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   131,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   198,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   102,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   192,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   186,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   179,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   183,   147,    38,    39,    40,    41,    42,    43,    44,
    45,   145,   146,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   147,    38,    39,    40,
    41,    42,    43,    44,    45,   145,   146 ]

racc_action_check = [
     0,     0,     0,    58,   205,   216,    58,   205,   210,   190,
   210,     0,   190,   153,     0,     0,     0,   115,     0,     0,
     0,     0,   109,     0,     3,     3,     3,   216,   107,    85,
    85,    85,     0,    97,    97,     3,   105,   101,     3,     3,
     3,    85,     3,     3,     3,     3,   100,     3,    53,    53,
    53,    62,    62,    62,    96,   123,     3,   127,   130,    95,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    13,    13,    13,   135,    53,   136,
    94,   140,    93,   144,   150,    92,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    59,    59,    59,   111,    13,    91,    89,    87,    83,   159,
    81,    78,    75,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    59,    59,    59,    59,   196,   196,   196,    59,
    72,   196,   177,    71,   196,   196,    68,   196,   188,   196,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   215,   215,   215,    67,    66,
   215,    65,    64,   215,   201,    63,   215,    60,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   171,   171,   171,    34,    32,   171,
    31,    18,   171,   171,     1,   171,   217,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   133,   133,   133,   nil,   nil,   133,   nil,
   nil,   133,   nil,   nil,   133,   nil,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   209,   209,   209,   nil,   nil,   209,   nil,   nil,
   209,   nil,   nil,   209,   nil,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   176,   176,   176,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   176,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   176,    29,    29,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,    30,    30,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,   114,
   114,   114,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,    27,    27,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,   206,   206,   206,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,    26,    26,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,   117,   117,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,    25,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,   118,   118,   118,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   119,   119,   119,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   203,   203,   203,
   nil,   nil,   nil,   nil,   nil,   203,   nil,   nil,   nil,   nil,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   199,   199,   199,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,    14,
    14,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,    14,   192,   192,   192,   nil,   nil,
   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   103,   103,   103,   nil,   103,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   184,   184,   184,
   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,   nil,   nil,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,    69,    69,    69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    69,    69,    69,   180,
   180,   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,    28,    28,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,   172,   172,   172,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,    76,    76,    76,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    77,    77,    77,   nil,    77,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,     8,
     8,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,   122,   122,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   170,   170,   170,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   170,   170,    82,    82,    82,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,   158,   158,   158,   nil,   nil,   nil,   nil,
   nil,   158,   nil,   nil,   nil,   nil,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,    84,
    84,    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,   121,   121,   121,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   157,   157,   157,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   156,   156,   156,
   nil,   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,    90,    90,    90,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,   155,
   155,   155,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,    99,    99,    99,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,   142,   142,   142,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   138,   138,   138,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,    80,    80,    80,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,   152,
   152,   152,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   120,   120,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120 ]

racc_action_pointer = [
    -2,   194,   nil,    22,   nil,   nil,   nil,   nil,   867,   nil,
   nil,   nil,   nil,    72,   607,   nil,   nil,   nil,   178,   nil,
   nil,   nil,   nil,   nil,   nil,   477,   425,   373,   763,   295,
   321,   159,   188,   nil,   182,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,    -2,    98,
   152,   nil,    49,   134,   143,   130,   128,   127,   105,   711,
   nil,   102,   123,   nil,   nil,    81,   815,   841,    80,   nil,
  1231,    79,   945,    95,   997,    27,   nil,    99,   nil,    75,
  1101,    92,    73,    69,    67,    54,    41,    27,   nil,  1153,
    33,    32,   nil,   659,   nil,    28,   nil,    23,   nil,    -9,
   nil,    72,   nil,   nil,   347,     4,   nil,   451,   503,   529,
  1281,  1023,   893,    40,   nil,   nil,   nil,    49,   nil,   nil,
    27,   nil,   nil,   211,   nil,    64,    66,   nil,  1205,   nil,
    76,   nil,  1179,   nil,    50,   nil,   nil,   nil,   nil,   nil,
    53,   nil,  1257,     5,   nil,  1127,  1075,  1049,   971,    96,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   919,   182,   789,   nil,   nil,   nil,   269,   124,   nil,   nil,
   737,   nil,   nil,   nil,   685,   nil,   nil,   nil,   105,   nil,
     0,   nil,   633,   nil,   nil,   nil,   124,   nil,   nil,   581,
   nil,   156,   nil,   555,   nil,    -5,   399,   nil,   nil,   240,
    -1,   nil,   nil,   nil,   nil,   153,    -4,   165,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -133,  -133,    -1,    -2,    -3,    -5,    -6,    -7,   -13,    -9,
   -10,   -11,   -12,  -133,   -97,   -99,  -100,  -101,  -133,  -106,
  -107,  -108,  -109,  -110,  -111,  -133,  -133,  -133,  -133,  -133,
  -133,  -133,  -133,    -4,   -15,   -14,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -25,  -133,   -29,   -31,   -32,   -33,   -62,   -88,
  -133,   -98,  -133,   -88,  -114,   -88,   -88,   -88,   -88,  -133,
   224,   -88,  -133,   -26,   -30,   -88,  -133,  -133,   -89,   -90,
  -133,   -88,  -133,  -133,  -133,  -133,  -103,  -133,  -112,   -88,
  -133,  -133,  -133,  -133,  -133,  -119,  -133,  -133,   -17,  -133,
   -27,   -62,   -63,  -133,   -65,  -133,   -91,   -62,   -93,   -88,
   -95,   -88,  -102,  -104,  -133,  -133,   -57,  -115,  -133,  -133,
  -133,  -133,  -133,  -133,    -8,   -16,   -18,  -133,   -28,   -34,
   -88,   -64,   -66,  -133,   -92,  -133,  -133,  -105,  -133,   -58,
  -119,  -122,  -133,  -125,  -127,   -52,   -53,   -54,   -55,   -56,
   -88,   -60,  -133,  -133,  -117,  -133,  -133,  -133,  -133,   -27,
   -67,   -68,   -69,   -70,   -71,   -72,   -73,   -74,   -75,   -76,
  -133,  -133,  -133,   -87,   -94,   -96,  -133,  -133,  -123,  -124,
  -133,   -59,   -61,  -128,  -133,  -118,  -129,  -120,  -130,  -131,
   -23,   -20,  -133,   -35,   -77,   -78,  -133,   -80,   -82,  -133,
   -84,  -133,  -113,  -133,  -126,   -23,  -133,   -19,   -21,  -133,
  -133,   -79,   -81,   -83,   -85,  -133,   -88,   -88,  -132,   -24,
   -22,   -86,  -121,  -116 ]

racc_goto_table = [
     8,    61,   110,     8,   129,   149,   123,    54,    35,   150,
    98,   160,   200,    58,     4,   124,    75,    33,   149,   128,
   185,   185,     1,   178,   104,    63,    64,    65,    66,    67,
    68,   103,   151,   117,   190,   126,    83,   149,    86,   214,
    88,   150,    91,    92,    93,    94,    81,    74,    96,   197,
   132,   177,   100,    58,   174,   175,   149,   178,   108,   130,
   205,   113,    87,   193,   182,   134,   115,   196,   210,    95,
   199,   111,   142,   152,   212,   106,   101,   105,   128,   216,
   107,   149,   109,   207,    60,    87,   135,   219,   136,    85,
   116,    53,   176,   221,   149,   155,   156,    89,   217,   127,
   149,    97,    71,   105,    34,     3,     2,   159,   144,   188,
   nil,   nil,   nil,   nil,   137,   nil,   nil,   139,   nil,   143,
   148,   153,   153,   nil,   nil,   nil,   nil,   181,   nil,   nil,
   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   148,   nil,   nil,   153,   153,   189,   191,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   194,   148,   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   204,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   191,   222,   223,   nil,   148,   nil,   nil,   201,
   nil,   nil,   nil,   191,   nil,   nil,   218,   nil,   nil,   148,
   nil,   nil,   nil,   nil,   nil,   148 ]

racc_goto_check = [
     8,    26,    12,     8,    20,    27,    59,    21,    13,    28,
    15,    18,    40,    13,     4,    12,    25,     4,    27,    12,
    57,    57,     1,    60,    33,    13,    13,    13,    13,    13,
    13,    32,    30,    29,    16,    15,    11,    27,    48,    40,
    11,    28,    11,    11,    11,    11,    26,    21,    11,    18,
    33,    59,    11,    13,    12,    12,    27,    60,    11,    25,
    16,    48,     8,    20,    30,    25,    11,    38,    16,    13,
    39,    26,    56,    31,    18,    42,    13,    13,    12,    16,
    13,    27,    13,    17,    43,     8,    11,    18,    11,    47,
    13,    19,    56,    18,    27,    58,    58,    55,    17,    13,
    27,    14,    10,    13,     9,     3,     2,    11,    61,    62,
   nil,   nil,   nil,   nil,    13,   nil,   nil,    13,   nil,    13,
     8,    13,    13,   nil,   nil,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,    13,    13,    13,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,     8,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,    11,    11,   nil,     8,   nil,   nil,    13,
   nil,   nil,   nil,    13,   nil,   nil,    13,   nil,   nil,     8,
   nil,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,    22,   106,   105,    14,   nil,   nil,   nil,     0,    96,
    68,   -23,   -81,     0,    29,   -62,  -124,  -107,  -122,    78,
   -96,    -6,   nil,   nil,   nil,   -42,   -13,  -115,  -111,   -57,
   -88,   -47,   -46,   -53,   nil,   nil,   nil,   nil,  -104,  -102,
  -160,   nil,    -3,    70,   nil,   nil,   nil,    27,   -24,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   -46,  -135,   -26,   -89,
  -119,   -11,   -48 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,    50,   nil,
   nil,   nil,     9,   140,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    55,    56,    57,   nil,    36,    51,   173,   nil,
   nil,   nil,   nil,   nil,   166,   167,   168,   169,   nil,   nil,
   nil,    78,    79,   nil,    15,    16,    17,   nil,   nil,    19,
    20,    21,    22,    23,    24,   nil,   nil,   154,   nil,   nil,
   141,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  2, 38, :_reduce_4,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  5, 40, :_reduce_8,
  1, 40, :_reduce_9,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  0, 44, :_reduce_13,
  1, 44, :_reduce_none,
  0, 45, :_reduce_15,
  3, 45, :_reduce_16,
  1, 49, :_reduce_17,
  2, 49, :_reduce_18,
  5, 50, :_reduce_19,
  1, 51, :_reduce_20,
  2, 51, :_reduce_21,
  3, 51, :_reduce_22,
  0, 52, :_reduce_23,
  2, 52, :_reduce_24,
  2, 47, :_reduce_25,
  3, 47, :_reduce_26,
  0, 55, :_reduce_27,
  1, 55, :_reduce_28,
  1, 54, :_reduce_29,
  2, 54, :_reduce_30,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  4, 57, :_reduce_34,
  6, 57, :_reduce_35,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 64, :_reduce_57,
  2, 64, :_reduce_58,
  2, 65, :_reduce_59,
  1, 66, :_reduce_60,
  2, 66, :_reduce_61,
  0, 60, :_reduce_62,
  2, 60, :_reduce_63,
  3, 60, :_reduce_64,
  1, 67, :_reduce_65,
  2, 67, :_reduce_66,
  3, 68, :_reduce_67,
  1, 53, :_reduce_68,
  1, 53, :_reduce_69,
  1, 53, :_reduce_70,
  1, 53, :_reduce_71,
  1, 53, :_reduce_72,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  2, 69, :_reduce_77,
  2, 70, :_reduce_78,
  3, 70, :_reduce_79,
  1, 73, :_reduce_80,
  2, 73, :_reduce_81,
  2, 71, :_reduce_82,
  3, 71, :_reduce_83,
  1, 74, :_reduce_84,
  2, 74, :_reduce_85,
  3, 75, :_reduce_86,
  1, 72, :_reduce_87,
  0, 46, :_reduce_88,
  1, 46, :_reduce_none,
  1, 76, :_reduce_90,
  2, 76, :_reduce_91,
  3, 77, :_reduce_92,
  3, 58, :_reduce_93,
  5, 59, :_reduce_94,
  3, 59, :_reduce_95,
  6, 41, :_reduce_96,
  0, 78, :_reduce_97,
  1, 78, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  4, 79, :_reduce_102,
  1, 82, :_reduce_none,
  2, 82, :_reduce_104,
  3, 83, :_reduce_105,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  3, 84, :_reduce_112,
  7, 85, :_reduce_113,
  0, 90, :_reduce_114,
  2, 90, :_reduce_115,
  5, 92, :_reduce_116,
  1, 93, :_reduce_117,
  2, 93, :_reduce_118,
  0, 94, :_reduce_119,
  3, 94, :_reduce_120,
  5, 95, :_reduce_121,
  1, 91, :_reduce_122,
  2, 91, :_reduce_123,
  6, 86, :_reduce_124,
  1, 96, :_reduce_125,
  3, 96, :_reduce_126,
  5, 87, :_reduce_127,
  6, 88, :_reduce_128,
  6, 89, :_reduce_129,
  6, 81, :_reduce_130,
  1, 97, :_reduce_131,
  3, 97, :_reduce_132 ]

racc_reduce_n = 133

racc_shift_n = 224

racc_token_table = {
  false => 0,
  :error => 1,
  :QUERY => 2,
  :MUTATION => 3,
  :SUBSCRIPTION => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :VAR_SIGN => 7,
  :COLON => 8,
  :BANG => 9,
  :LBRACKET => 10,
  :RBRACKET => 11,
  :EQUALS => 12,
  :LCURLY => 13,
  :RCURLY => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :IDENTIFIER => 24,
  :FRAGMENT => 25,
  :TRUE => 26,
  :FALSE => 27,
  :FLOAT => 28,
  :INT => 29,
  :STRING => 30,
  :DIR_SIGN => 31,
  :ELLIPSIS => 32,
  :PIPE => 33,
  :DIRECTIVE => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "LCURLY",
  "RCURLY",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "DIR_SIGN",
  "ELLIPSIS",
  "PIPE",
  "DIRECTIVE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "operation_definition",
  "fragment_definition",
  "type_system_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "input_value",
  "selection_list",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "name_list",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "variable",
  "list_value",
  "object_value",
  "enum_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "implements_opt",
  "field_definition_list",
  "input_value_definition",
  "input_value_definition_list",
  "arguments_definitions_opt",
  "field_definition",
  "union_members",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_8(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_9(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_13(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_15(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_17(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_18(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_19(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_22(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_23(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_24(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_26(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_27(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_28(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_29(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_30(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_34(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_35(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_57(val, _values, result)
     return [val[0].to_s]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_58(val, _values, result)
     val[0] << val[1].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_59(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_60(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_61(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_62(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_63(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_64(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_65(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_66(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_67(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_68(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_69(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_70(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_71(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_72(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_77(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_78(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_79(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_80(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_81(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_82(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_83(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_84(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_85(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_86(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_87(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_88(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_90(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_91(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_92(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_93(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_94(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_95(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_96(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 245)
  def _reduce_97(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.y', 254)
  def _reduce_102(val, _values, result)
     return make_node(:SchemaDefinition, val[2]) 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_104(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_105(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 271)
  def _reduce_112(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 275)
  def _reduce_113(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[1], interfaces: val[2], directives: val[3], fields: val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_114(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_115(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_116(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_117(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_118(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_119(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_120(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_121(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_122(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_123(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 306)
  def _reduce_124(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_125(val, _values, result)
     return [val[0].to_s]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_126(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_127(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_128(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_129(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_130(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 334)
  def _reduce_131(val, _values, result)
     return [val[0].to_s] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_132(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
