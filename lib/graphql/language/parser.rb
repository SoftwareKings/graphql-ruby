#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 346)

def initialize(query_string)
  @query_string = query_string
end

def parse_document
  @document ||= begin
    @tokens ||= GraphQL.scan(@query_string)
    if @tokens.none?
      make_node(:Document, definitions: [])
    else
      do_parse
    end
  end
end

def self.parse(query_string)
  self.new(query_string).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$"
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,    12,   128,   100,    78,   138,   138,    77,   138,
    81,    78,    53,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
    81,    81,    60,    81,   138,   138,   136,   214,   214,    74,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,    78,    13,    60,
    10,    11,    12,   138,    13,   182,   125,    83,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   162,    81,   177,   163,    81,   178,
   215,   124,   179,    13,   152,    38,    39,    40,    41,    42,
    43,    44,    45,    46,   150,   151,   169,   170,   166,   167,
   168,   176,    10,    11,    12,   123,    13,   177,   122,   125,
   178,   201,   121,   179,   188,   152,    38,    39,    40,    41,
    42,    43,    44,    45,    46,   150,   151,   169,   170,   166,
   167,   168,   176,    10,    11,    12,   143,    81,   177,   192,
   117,   178,    13,    81,   179,    81,   152,    38,    39,    40,
    41,    42,    43,    44,    45,    46,   150,   151,   169,   170,
   166,   167,   168,   176,    10,    11,    12,    13,    81,   177,
   100,    81,   178,    81,   209,   179,    81,   152,    38,    39,
    40,    41,    42,    43,    44,    45,    46,   150,   151,   169,
   170,   166,   167,   168,   176,    10,    11,    12,    81,   212,
   177,    81,    91,   178,    81,   219,   179,    85,   152,    38,
    39,    40,    41,    42,    43,    44,    45,    46,   150,   151,
   169,   170,   166,   167,   168,   176,    10,    11,    12,    73,
    71,    70,    63,    32,    81,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   112,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   112,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   217,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   112,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   134,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   103,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   112,
   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   112,   nil,   nil,   nil,   nil,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    10,
    11,    12,   nil,   195,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    10,    11,    12,   nil,
   nil,   nil,   nil,   nil,   112,   nil,   nil,   nil,   nil,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   194,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    10,    11,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   187,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    10,    11,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    10,    11,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   191,   152,    38,    39,    40,    41,
    42,    43,    44,    45,    46,   150,   151,    10,    11,    12,
   nil,   nil,    10,    11,    12,   nil,   nil,   nil,    13,   nil,
   nil,    18,    25,    26,   115,    27,    28,    29,    30,    31,
   nil,    14,    10,    11,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   152,    38,    39,    40,    41,
    42,    43,    44,    45,    46,   150,   151,    10,    11,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,    18,    25,    26,   nil,    27,    28,    29,    30,    31,
   nil,    14 ]

racc_action_check = [
    13,    13,    13,    98,    98,    59,   111,   114,    59,   220,
   155,   108,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    54,    54,    54,
   111,   114,    13,   220,   211,   198,   106,   211,   198,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    60,    60,    60,   102,   101,    54,
    63,    63,    63,   140,    97,   140,    96,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,   202,   202,   202,   126,    60,   202,   130,   133,   202,
   202,    95,   202,   139,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   178,   178,   178,    94,   141,   178,    93,   145,
   178,   178,    92,   178,   149,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   136,   136,   136,   118,    90,   136,   158,
    88,   136,    84,    82,   136,    79,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   219,   219,   219,   164,    76,   219,
    73,    72,   219,    69,   185,   219,    68,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   214,   214,   214,    67,   196,
   214,    66,    65,   214,    64,   207,   214,    61,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   117,   117,   117,    34,
    32,    31,    18,     1,   221,   nil,   nil,   nil,   nil,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,    27,    27,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    28,    28,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    29,    29,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    30,    30,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    25,    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,   212,   212,
   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   122,   122,   122,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,    14,    14,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,   124,
   124,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,     8,     8,     8,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,   209,   209,   209,   nil,   nil,   nil,   nil,
   nil,   209,   nil,   nil,   nil,   nil,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   112,   112,   112,   nil,   nil,   nil,   nil,   nil,   112,   nil,
   nil,   nil,   nil,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   205,   205,   205,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,    26,    26,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,   125,   125,   125,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   192,   192,
   192,   nil,   nil,   nil,   nil,   nil,   192,   nil,   nil,   nil,
   nil,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   188,   188,   188,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   121,   121,   121,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,    70,
    70,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,   179,   179,   179,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   104,   104,   104,   nil,   104,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   177,   177,   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   177,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,    77,    77,    77,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    78,    78,    78,   nil,    78,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,   163,   163,   163,   nil,   nil,   nil,   nil,   nil,   163,
   nil,   nil,   nil,   nil,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,    81,    81,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,   162,   162,   162,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,    83,    83,    83,   nil,   nil,   nil,   nil,   nil,
    83,   nil,   nil,   nil,   nil,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,   161,
   161,   161,   nil,   161,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,    85,    85,    85,   nil,
   nil,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,   120,   120,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   160,   160,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   100,   100,   100,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,    91,    91,    91,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,   147,   147,   147,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   143,   143,
   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   184,   184,   184,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   157,   157,   157,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,     3,     3,     3,
   nil,   nil,    86,    86,    86,   nil,   nil,   nil,     3,   nil,
   nil,     3,     3,     3,    86,     3,     3,     3,     3,     3,
   nil,     3,   123,   123,   123,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,     0,     0,     0,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,     0,     0,     0,   nil,     0,     0,     0,     0,     0,
   nil,     0 ]

racc_action_pointer = [
  1335,   243,   nil,  1285,   nil,   nil,   nil,   nil,   504,   nil,
   nil,   nil,   nil,    -2,   450,   nil,   nil,   nil,   229,   nil,
   nil,   nil,   nil,   nil,   nil,   369,   612,   261,   288,   315,
   342,   208,   240,   nil,   234,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,     0,
    52,   202,   nil,    58,   181,   193,   178,   175,   153,   150,
   747,   nil,   148,   173,   nil,   nil,   145,   855,   882,   122,
   nil,   936,   120,   990,   139,  1044,  1290,   nil,   142,   nil,
   114,  1152,   109,   106,   102,    78,    61,    51,    -3,   nil,
  1125,    45,    52,   nil,   801,   nil,    28,   nil,     6,   nil,
   nil,    -3,   558,   nil,    -2,   nil,   nil,   234,   133,   nil,
  1071,   720,   423,  1310,   477,   639,    69,   nil,   nil,   nil,
    79,   nil,   nil,    55,   nil,   nil,   141,   nil,   nil,    80,
    54,   103,   nil,  1206,   nil,   114,   nil,  1179,   nil,    89,
   nil,   nil,   nil,   nil,   nil,   -23,   nil,  1260,   141,   nil,
  1098,  1017,   963,   909,   164,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   828,   110,   774,
   nil,   nil,   nil,   nil,  1233,   176,   nil,   nil,   693,   nil,
   nil,   nil,   666,   nil,   nil,   nil,   174,   nil,    26,   nil,
   nil,   nil,    79,   nil,   nil,   585,   nil,   207,   nil,   531,
   nil,    25,   396,   nil,   203,   nil,   nil,   nil,   nil,   172,
     0,   211,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -136,  -136,    -1,    -2,    -3,    -5,    -6,    -7,   -13,    -9,
   -10,   -11,   -12,  -136,  -100,  -102,  -103,  -104,  -136,  -109,
  -110,  -111,  -112,  -113,  -114,  -136,  -136,  -136,  -136,  -136,
  -136,  -136,  -136,    -4,   -15,   -14,   -36,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -25,  -136,   -29,   -31,   -32,   -33,   -63,
   -91,  -136,  -101,  -136,   -91,  -117,   -91,   -91,   -91,   -91,
  -136,   227,   -91,  -136,   -26,   -30,   -91,  -136,  -136,   -92,
   -93,  -136,   -91,  -136,  -136,  -136,  -136,  -106,  -136,  -115,
   -91,  -136,  -136,  -136,  -136,  -136,  -122,  -136,  -136,   -17,
  -136,   -27,   -63,   -64,  -136,   -66,  -136,   -94,   -63,   -96,
   -20,   -91,  -136,   -98,   -91,  -105,  -107,  -136,  -136,   -58,
  -118,  -136,  -136,  -136,  -136,  -136,  -136,    -8,   -16,   -18,
  -136,   -28,   -34,   -91,   -65,   -67,  -136,   -95,   -21,  -136,
  -136,  -136,  -108,  -136,   -59,  -122,  -125,  -136,  -128,  -130,
   -53,   -54,   -55,   -56,   -57,   -91,   -61,  -136,  -136,  -120,
  -136,  -136,  -136,  -136,   -27,   -68,   -69,   -70,   -71,   -72,
   -73,   -74,   -75,   -76,   -77,   -78,   -79,  -136,  -136,  -136,
   -90,   -97,   -22,   -99,  -136,  -136,  -126,  -127,  -136,   -60,
   -62,  -131,  -136,  -121,  -132,  -123,  -133,  -134,   -23,   -35,
   -80,   -81,  -136,   -83,   -85,  -136,   -87,  -136,  -116,  -136,
  -129,   -23,  -136,   -19,  -136,   -82,   -84,   -86,   -88,  -136,
   -91,   -91,  -135,   -24,   -89,  -124,  -119 ]

racc_goto_table = [
     8,    62,   111,     8,   114,   154,   132,    55,    35,   165,
   126,   155,    76,    59,    87,   186,   193,   193,   154,   113,
   213,     1,   147,   156,    99,    64,    65,    66,    67,    68,
    69,   140,   127,   221,    84,   104,   131,   116,    89,   154,
    92,    93,    94,    95,   184,   155,    97,    82,    75,   129,
   101,   203,   186,   105,    59,   133,   109,   190,   120,   185,
   154,   137,     4,    88,   118,    33,   202,   206,   205,   199,
    96,   160,   161,   157,   181,   216,   183,   102,   106,   135,
   107,   108,   198,    61,   154,   139,    88,   223,   141,    86,
    54,   119,   224,   218,    90,    98,   154,    72,    34,   131,
   130,   154,     3,     2,   106,   149,   196,   164,   nil,   nil,
   nil,   211,   nil,   nil,   nil,   nil,   nil,   142,   nil,   nil,
   144,   145,   148,   153,   158,   158,   nil,   nil,   220,   189,
   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,   nil,
   nil,   nil,   nil,   145,   nil,   nil,   nil,   145,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,
   158,   158,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   153,   207,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   210,   nil,
   nil,   nil,   nil,   nil,   225,   226,   nil,   nil,   nil,   nil,
   nil,   nil,   153,   nil,   nil,   207,   nil,   nil,   nil,   nil,
   nil,   nil,   222,   nil,   153,   nil,   nil,   nil,   nil,   153 ]

racc_goto_check = [
     8,    26,    16,     8,    16,    27,    20,    21,    13,    18,
    60,    28,    25,    13,    49,    61,    58,    58,    27,    12,
    17,     1,    57,    30,    15,    13,    13,    13,    13,    13,
    13,    16,    12,    17,    11,    32,    12,    49,    11,    27,
    11,    11,    11,    11,    57,    28,    11,    26,    21,    15,
    11,    18,    61,    33,    13,    25,    11,    30,    29,    60,
    27,    25,     4,     8,    11,     4,    39,    41,    40,    20,
    13,    59,    59,    31,    12,    18,    12,    13,    13,    33,
    43,    13,    16,    44,    27,    11,     8,    18,    11,    48,
    19,    13,    18,    41,    56,    14,    27,    10,     9,    12,
    13,    27,     3,     2,    13,    62,    63,    11,   nil,   nil,
   nil,    16,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
    13,    13,    13,     8,    13,    13,   nil,   nil,    16,    11,
   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,    13,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,
    13,    13,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,     8,    13,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,    13,   nil,
   nil,   nil,   nil,   nil,    11,    11,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,    13,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,     8,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,    21,   103,   102,    62,   nil,   nil,   nil,     0,    90,
    63,   -26,   -65,     0,    22,   -49,   -81,  -178,  -127,    77,
   -95,    -6,   nil,   nil,   nil,   -47,   -13,  -118,  -112,   -33,
  -100,   -50,   -43,   -25,   nil,   nil,   nil,   nil,   nil,  -112,
  -111,  -112,   nil,     1,    69,   nil,   nil,   nil,    26,   -49,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   -99,  -144,   -53,
   -86,  -132,   -17,   -56 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,    51,   nil,
   nil,   nil,     9,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    56,    57,    58,   nil,    36,    52,   180,   nil,
   nil,   nil,   nil,   nil,   171,   172,   173,   174,   175,   nil,
   nil,   nil,    79,    80,   nil,    15,    16,    17,   nil,   nil,
    19,    20,    21,    22,    23,    24,   nil,   nil,   159,   nil,
   nil,   146,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_none,
  1, 38, :_reduce_2,
  1, 39, :_reduce_3,
  2, 39, :_reduce_4,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  5, 41, :_reduce_8,
  1, 41, :_reduce_9,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  0, 45, :_reduce_13,
  1, 45, :_reduce_none,
  0, 46, :_reduce_15,
  3, 46, :_reduce_16,
  1, 50, :_reduce_17,
  2, 50, :_reduce_18,
  5, 51, :_reduce_19,
  1, 52, :_reduce_20,
  2, 52, :_reduce_21,
  3, 52, :_reduce_22,
  0, 53, :_reduce_23,
  2, 53, :_reduce_24,
  2, 48, :_reduce_25,
  3, 48, :_reduce_26,
  0, 56, :_reduce_27,
  1, 56, :_reduce_28,
  1, 55, :_reduce_29,
  2, 55, :_reduce_30,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  4, 58, :_reduce_34,
  6, 58, :_reduce_35,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 65, :_reduce_58,
  2, 65, :_reduce_59,
  2, 66, :_reduce_60,
  1, 67, :_reduce_61,
  2, 67, :_reduce_62,
  0, 61, :_reduce_63,
  2, 61, :_reduce_64,
  3, 61, :_reduce_65,
  1, 68, :_reduce_66,
  2, 68, :_reduce_67,
  3, 69, :_reduce_68,
  1, 54, :_reduce_69,
  1, 54, :_reduce_70,
  1, 54, :_reduce_71,
  1, 54, :_reduce_72,
  1, 54, :_reduce_73,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 70, :_reduce_79,
  2, 71, :_reduce_80,
  2, 72, :_reduce_81,
  3, 72, :_reduce_82,
  1, 75, :_reduce_83,
  2, 75, :_reduce_84,
  2, 73, :_reduce_85,
  3, 73, :_reduce_86,
  1, 76, :_reduce_87,
  2, 76, :_reduce_88,
  3, 77, :_reduce_89,
  1, 74, :_reduce_90,
  0, 47, :_reduce_91,
  1, 47, :_reduce_none,
  1, 78, :_reduce_93,
  2, 78, :_reduce_94,
  3, 79, :_reduce_95,
  3, 59, :_reduce_96,
  5, 60, :_reduce_97,
  3, 60, :_reduce_98,
  6, 42, :_reduce_99,
  0, 80, :_reduce_100,
  1, 80, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  4, 81, :_reduce_105,
  1, 84, :_reduce_none,
  2, 84, :_reduce_107,
  3, 85, :_reduce_108,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  3, 86, :_reduce_115,
  7, 87, :_reduce_116,
  0, 92, :_reduce_117,
  2, 92, :_reduce_118,
  5, 94, :_reduce_119,
  1, 95, :_reduce_120,
  2, 95, :_reduce_121,
  0, 96, :_reduce_122,
  3, 96, :_reduce_123,
  5, 97, :_reduce_124,
  1, 93, :_reduce_125,
  2, 93, :_reduce_126,
  6, 88, :_reduce_127,
  1, 98, :_reduce_128,
  3, 98, :_reduce_129,
  5, 89, :_reduce_130,
  6, 90, :_reduce_131,
  6, 91, :_reduce_132,
  6, 83, :_reduce_133,
  1, 99, :_reduce_134,
  3, 99, :_reduce_135 ]

racc_reduce_n = 136

racc_shift_n = 227

racc_token_table = {
  false => 0,
  :error => 1,
  :QUERY => 2,
  :MUTATION => 3,
  :SUBSCRIPTION => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :VAR_SIGN => 7,
  :COLON => 8,
  :BANG => 9,
  :LBRACKET => 10,
  :RBRACKET => 11,
  :EQUALS => 12,
  :LCURLY => 13,
  :RCURLY => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :NULL => 32,
  :DIR_SIGN => 33,
  :ELLIPSIS => 34,
  :PIPE => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "LCURLY",
  "RCURLY",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "operation_definition",
  "fragment_definition",
  "type_system_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "input_value",
  "selection_list",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "name_list",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "null_value",
  "variable",
  "list_value",
  "object_value",
  "enum_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "implements_opt",
  "field_definition_list",
  "input_value_definition",
  "input_value_definition_list",
  "arguments_definitions_opt",
  "field_definition",
  "union_members",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_8(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_9(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_13(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_15(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_16(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_17(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_18(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_19(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_22(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_23(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_24(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_25(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_26(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_27(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_28(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_29(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_30(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_34(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_35(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_58(val, _values, result)
     return [make_node(:TypeName, name: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_59(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_60(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_61(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_62(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_63(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_64(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_65(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_66(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_67(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_68(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_69(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_70(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_71(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_72(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_73(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_79(val, _values, result)
     return make_node(:NullValue, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_80(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_81(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_82(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_83(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_84(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 192)
  def _reduce_85(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_86(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_87(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_88(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_89(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_90(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_91(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_93(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_94(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_95(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_96(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_97(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_98(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_99(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_100(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_105(val, _values, result)
     return make_node(:SchemaDefinition, val[2]) 
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_107(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_108(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_115(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2], description: get_description(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_116(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[1], interfaces: val[2], directives: val[3], fields: val[5], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_117(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 283)
  def _reduce_118(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_119(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_120(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_121(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_122(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 296)
  def _reduce_123(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_124(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_125(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_126(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 309)
  def _reduce_127(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_128(val, _values, result)
     return [make_node(:TypeName, name: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_129(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_130(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_131(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_132(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_133(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5], description: get_description(val[0]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_134(val, _values, result)
     return [val[0].to_s] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_135(val, _values, result)
     val[0] << val[2].to_s 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
