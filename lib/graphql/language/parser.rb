#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 430)

def initialize(query_string, filename:, tracer: Tracing::NullTracer)
  @query_string = query_string
  @filename = filename
  @tracer = tracer
end

def parse_document
  @document ||= begin
    # Break the string into tokens
    @tracer.trace("lex", {query_string: @query_string}) do
      @tokens ||= GraphQL.scan(@query_string)
    end
    # From the tokens, build an AST
    @tracer.trace("parse", {query_string: @query_string}) do
      if @tokens.none?
        make_node(:Document, definitions: [], filename: @filename)
      else
        do_parse
      end
    end
  end
end

def self.parse(query_string, filename: nil, tracer: GraphQL::Tracing::NullTracer)
  self.new(query_string, filename: filename, tracer: tracer).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$" || lexer_token == nil
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string, filename: @filename)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string, filename: @filename)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  assigns[:filename] = @filename

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,  -100,    12,    13,    14,  -100,   174,   174,   174,  -100,
   287,   174,   174,   234,    19,    35,  -100,    76,    38,    39,
    40,    41,    42,    11,    15,    12,    13,    14,    76,    36,
    76,   136,    76,    28,    76,    76,    76,    19,    35,  -147,
    76,    38,    39,    40,    41,    42,   183,    15,    12,    13,
    14,  -100,    36,  -100,    99,   174,    28,    98,   287,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,   235,    12,    13,    14,  -151,   165,   125,
   186,   103,    76,   293,    76,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    95,
    12,    13,    14,   125,    71,   179,    12,    13,    14,   240,
   243,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    65,    12,    13,    14,    94,
    71,   238,    12,    13,    14,    92,    76,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    12,    13,    14,   249,   162,    71,    12,    13,    14,
    76,   253,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,   303,    76,    12,    13,
    14,    71,    12,    13,    14,   257,   230,    76,    43,   202,
    49,    50,    51,    52,    53,    54,    55,    56,    57,   200,
   201,   219,   220,   216,   217,   218,   228,   231,    91,    12,
    13,    14,   304,   136,   229,    86,    76,   230,    76,    76,
   202,    49,    50,    51,    52,    53,    54,    55,    56,    57,
   200,   201,   219,   220,   216,   217,   218,   228,   231,   307,
    12,    13,    14,   243,    76,   229,   253,    76,   230,    76,
    76,   202,    49,    50,    51,    52,    53,    54,    55,    56,
    57,   200,   201,   219,   220,   216,   217,   218,   228,   303,
    76,    12,    13,    14,    76,   147,   158,   159,   160,   230,
   161,   162,   202,    49,    50,    51,    52,    53,    54,    55,
    56,    57,   200,   201,   219,   220,   216,   217,   218,   228,
   231,   136,    12,    13,    14,    76,    76,   229,    99,   282,
   230,   266,   173,   202,    49,    50,    51,    52,    53,    54,
    55,    56,    57,   200,   201,   219,   220,   216,   217,   218,
   228,   231,   147,    12,    13,    14,   181,   136,   229,    76,
    76,   230,   143,   190,   202,    49,    50,    51,    52,    53,
    54,    55,    56,    57,   200,   201,   219,   220,   216,   217,
   218,   228,   231,   191,    12,    13,    14,    99,   192,   229,
   136,   193,   230,   288,    76,   202,    49,    50,    51,    52,
    53,    54,    55,    56,    57,   200,   201,   219,   220,   216,
   217,   218,   228,    12,    13,    14,    78,    79,    80,   106,
    81,    82,    83,    84,   101,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,   278,    12,
    13,    14,    76,   285,    76,   212,   213,    76,    76,   136,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,   275,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
   269,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,   259,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,   297,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,   252,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,   294,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
   290,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,   280,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,   310,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,   298,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   171,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   260,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,   279,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   202,    49,    50,    51,    52,    53,    54,    55,    56,
    57,   200,   201,   256,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   202,    49,    50,    51,    52,
    53,    54,    55,    56,    57,   200,   201,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,    49,
    50,    51,    52,    53,    54,    55,    56,    57,   200,   201,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   202,    49,    50,    51,    52,    53,    54,    55,    56,
    57,   200,   201,  -157,   nil,   nil,   nil,  -157,   nil,   nil,
   nil,   nil,   nil,  -157,   nil,  -157,  -157 ]

racc_action_check = [
     0,   154,     0,     0,     0,   148,   138,   284,   299,   107,
   284,   176,   134,   176,     0,     0,   150,    97,     0,     0,
     0,     0,     0,     3,     0,     3,     3,     3,   138,     0,
   299,   178,   154,     0,   134,   150,   148,     3,     3,     3,
   107,     3,     3,     3,     3,     3,   145,     3,   147,   147,
   147,   184,     3,   152,    70,   263,     3,    70,   263,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   177,   177,   177,   177,   145,   123,   123,
   147,    72,   184,   272,   152,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   177,    64,
    64,    64,    64,    94,   177,   140,   140,   140,   140,   185,
   187,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    11,    11,    11,    11,    45,
    64,   182,   182,   182,   182,    43,    19,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,   136,   136,   136,   194,   195,    11,   143,   143,   143,
    93,   199,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   307,   205,   307,   307,
   307,   136,   106,   106,   106,   208,   307,    90,     1,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   293,    42,   293,
   293,   293,   292,   214,   293,    37,    89,   293,    88,    87,
   293,   293,   293,   293,   293,   293,   293,   293,   293,   293,
   293,   293,   293,   293,   293,   293,   293,   293,   304,   296,
   304,   304,   304,   241,    85,   304,   246,    78,   304,   111,
   112,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   287,
   113,   287,   287,   287,   114,   116,   117,   118,   119,   287,
   120,   121,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   230,   122,   230,   230,   230,   300,   144,   230,   127,   250,
   230,   230,   131,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   173,   110,   173,   173,   173,   142,   126,   173,   109,
   146,   173,   108,   149,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   267,   151,   267,   267,   267,   105,   153,   267,
   102,   155,   267,   267,   156,   267,   267,   267,   267,   267,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   267,   267,    71,    71,    71,    28,    28,    28,    77,
    28,    28,    28,    28,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,   245,   245,
   245,   245,    71,   261,    74,   163,   167,   170,   100,   175,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   239,   239,   239,   239,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   231,   231,   231,   231,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   210,   210,   210,   210,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   276,   276,   276,   276,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   276,   276,   276,   276,   276,   276,
   276,   276,   276,   276,   276,   276,   276,   276,   197,   197,
   197,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   273,   273,   273,   273,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   270,   270,   270,   270,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   270,   270,   270,   270,   270,   270,   270,   270,
   270,   270,   270,   270,   270,   270,   248,   248,   248,   248,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   303,   303,   303,   303,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   303,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   281,   281,
   281,   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
   281,   281,   281,   281,   257,   257,   257,   nil,   nil,   nil,
   nil,   nil,   257,   nil,   nil,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   257,   257,    10,
    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    15,    15,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    35,
    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    38,    38,    38,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    38,    38,    38,    38,    38,
    38,    38,    38,    38,    38,    38,    38,    38,    38,    39,
    39,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    40,    40,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    41,
    41,    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    76,    76,    76,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    79,
    79,    79,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    80,    80,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    81,
    81,    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    82,    82,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    83,
    83,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    84,    84,    84,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    86,
    86,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    91,    91,    91,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    98,
    98,    98,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    99,    99,    99,   nil,    99,   nil,
   nil,   nil,   nil,   nil,   nil,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,   101,
   101,   101,   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   103,   103,   103,   nil,   nil,   nil,
   nil,   nil,   103,   nil,   nil,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   125,
   125,   125,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   129,   129,   129,   nil,   129,   nil,
   nil,   nil,   nil,   nil,   nil,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   135,
   135,   135,   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   158,   158,   158,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   159,
   159,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   161,   161,   161,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   162,
   162,   162,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   181,   181,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   183,
   183,   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   186,   186,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   188,
   188,   188,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   190,   190,   190,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   191,
   191,   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   193,   193,   193,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   211,
   211,   211,   nil,   211,   nil,   nil,   nil,   nil,   nil,   nil,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   212,   212,   212,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   213,
   213,   213,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   229,   229,   229,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   240,
   240,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   243,   243,   243,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   249,
   249,   249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
   249,   249,   249,   249,   253,   253,   253,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   253,   253,   253,   253,   253,
   253,   253,   253,   253,   253,   253,   253,   253,   253,   282,
   282,   282,   nil,   nil,   nil,   nil,   nil,   282,   nil,   nil,
   282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
   282,   282,   282,   282,   285,   285,   285,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   285,   247,
   247,   247,   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   247,   207,   207,   207,   207,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   192,   192,   192,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   160,   160,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   189,   nil,   nil,   nil,   189,   nil,   nil,
   nil,   nil,   nil,   189,   nil,   189,   189 ]

racc_action_pointer = [
    -2,   188,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   725,   122,   nil,   nil,   nil,   750,   nil,   nil,   nil,   103,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,
   nil,   nil,   nil,   nil,   nil,   775,   nil,   197,   800,   825,
   850,   875,   175,   135,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    96,   nil,   nil,   nil,   nil,   nil,
    47,   389,    66,   nil,   391,   nil,   900,   397,   214,   925,
   950,   975,  1000,  1025,  1050,   211,  1075,   186,   185,   183,
   154,  1100,   nil,   127,    94,   nil,   nil,   -16,  1125,  1150,
   395,  1175,   368,  1200,   nil,   360,   178,     7,   340,   306,
   313,   216,   217,   237,   241,   nil,   256,   274,   263,   276,
   278,   274,   299,    70,   nil,  1225,   335,   301,   nil,  1250,
   nil,   302,   nil,   nil,     1,  1275,   147,   nil,    -5,   nil,
   102,   nil,   326,   153,   273,    44,   307,    44,     3,   341,
     2,   349,    51,   366,    -1,   369,   341,   nil,  1300,  1325,
  1896,  1350,  1375,   410,   nil,   nil,   nil,   416,   nil,   nil,
   394,   nil,   nil,   329,   nil,   427,     0,    70,    29,   nil,
   nil,  1400,   128,  1425,    49,   107,  1450,    74,  1475,  1908,
  1500,  1525,  1873,  1550,   152,   148,   nil,   545,   nil,   124,
   nil,   nil,   nil,   nil,   nil,   144,   nil,  1850,   175,   nil,
   493,  1575,  1600,  1625,   211,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1650,
   298,   467,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   441,
  1675,   207,   nil,  1700,   nil,   415,   209,  1826,   623,  1725,
   299,   nil,   nil,  1750,   nil,   nil,   nil,   700,   nil,   nil,
   nil,   386,   nil,    44,   nil,   nil,   nil,   360,   nil,   nil,
   597,   nil,    73,   571,   nil,   nil,   519,   nil,   nil,   nil,
   nil,   675,  1775,   nil,    -4,  1800,   nil,   267,   nil,   nil,
   nil,   nil,   202,   205,   nil,   nil,   229,   nil,   nil,    -3,
   272,   nil,   nil,   649,   236,   nil,   nil,   174,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -147,  -177,    -1,    -2,    -3,    -5,    -6,    -7,    -8,    -9,
   -16,  -177,   -13,   -14,   -15,  -108,  -110,  -111,  -112,   -99,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -177,  -127,
  -128,  -129,  -130,  -131,  -132,  -177,  -148,  -177,  -177,  -177,
  -177,  -177,  -177,  -177,    -4,   -18,   -17,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,
   -51,   -52,   -53,   -54,  -177,   -12,   -31,   -33,   -34,   -35,
   -63,   -99,  -177,  -109,  -100,  -101,  -177,  -177,   -99,  -177,
  -177,  -177,  -177,  -177,  -177,   -99,  -177,   -99,   -99,   -99,
   -99,  -177,   312,   -99,  -177,   -11,   -32,   -99,  -177,  -177,
   -99,  -177,  -177,  -177,  -102,   -63,  -177,  -126,  -177,  -177,
  -150,   -99,   -99,   -99,   -99,  -146,  -150,  -177,  -177,  -177,
  -177,  -162,  -177,  -177,   -20,  -177,   -29,   -63,   -64,  -177,
   -66,  -177,  -104,   -23,   -99,  -177,  -177,  -106,   -99,  -103,
  -177,  -114,  -177,  -177,  -133,  -137,   -99,  -177,  -139,  -177,
  -141,  -177,  -143,  -177,  -145,  -177,   -99,  -151,  -165,  -177,
  -177,  -177,  -177,  -177,   -10,   -19,   -21,  -177,   -30,   -36,
   -99,   -65,   -67,   -78,   -24,  -177,  -177,  -177,  -177,  -113,
  -115,  -177,  -177,  -165,  -136,  -177,  -177,  -153,  -154,  -155,
  -165,  -177,  -177,  -177,  -177,  -162,  -166,  -177,  -169,  -171,
   -55,   -56,   -57,   -58,   -59,   -99,   -61,  -177,  -177,  -160,
  -177,  -177,  -177,  -177,   -29,   -68,   -69,   -70,   -71,   -72,
   -73,   -74,   -75,   -76,   -77,   -79,   -80,   -81,   -82,  -177,
  -177,  -177,   -98,  -105,   -25,   -28,  -107,  -116,  -125,  -177,
  -165,  -152,  -155,  -177,  -158,  -177,  -140,  -177,  -177,  -165,
  -177,  -167,  -168,  -177,   -60,   -62,  -172,  -177,  -161,  -173,
  -163,  -174,  -175,   -26,   -37,   -83,   -84,  -177,   -86,   -88,
  -177,   -90,  -177,  -177,   -95,  -134,  -177,  -156,  -138,  -142,
  -144,  -177,  -177,  -170,   -26,  -177,   -22,  -177,   -85,   -87,
   -89,   -91,  -177,   -78,   -94,   -96,  -177,  -135,  -149,   -99,
   -99,  -176,   -27,  -177,   -78,   -79,   -92,  -177,  -164,  -159,
   -93,   -97 ]

racc_goto_table = [
    10,    64,    96,    10,   169,    73,   180,   255,   215,    97,
    46,    70,   130,   271,   187,   134,   124,   138,   207,    77,
   140,   163,   199,   205,   210,   211,   197,   145,   146,   258,
   258,   270,   267,   157,   156,    85,     1,   129,    87,    88,
    89,    90,   172,   137,   139,   166,   261,   255,   180,   176,
   247,   239,   291,   241,   246,   205,   248,   182,   245,   123,
    93,   100,   204,   164,    70,   268,   170,   258,    45,     4,
   205,   102,    44,   188,   104,   204,   105,     3,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   264,   122,   204,   250,     2,   126,   127,   131,
   132,   133,   289,   133,    72,   295,   142,   104,   276,   204,
   205,   149,   151,   153,   155,    96,   233,   281,   286,   236,
   nil,   nil,   302,   nil,   251,   167,   177,   263,   305,   131,
   nil,   nil,   204,   nil,   175,   133,    70,   nil,   178,   300,
   142,   nil,   311,   142,   104,   nil,   185,   189,   104,   204,
   104,   nil,   104,   nil,   104,   nil,   194,   nil,   nil,   198,
   203,   208,   208,   nil,   nil,   nil,   251,   nil,   nil,   204,
   214,   284,   251,   203,   nil,   nil,   nil,    70,   nil,   nil,
   nil,   237,   142,   107,   104,   nil,   242,   nil,   244,   204,
   nil,   198,   203,   208,   nil,   204,   299,   nil,   nil,   nil,
   nil,   nil,   nil,   251,   nil,   254,   204,   203,   251,   204,
   208,   208,   262,   133,   144,   nil,   148,   150,   152,   154,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,
   203,   272,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   277,   nil,   nil,   nil,   203,   208,   nil,
   nil,   184,   nil,   283,   nil,   nil,   nil,   133,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,   nil,   nil,
   292,   nil,   nil,   296,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   133,   nil,   nil,   301,   nil,   203,   nil,   nil,
   nil,   nil,   nil,   203,   nil,   nil,   nil,   nil,   nil,   308,
   309,   nil,   nil,   296,   203,   nil,   nil,   203 ]

racc_goto_check = [
    10,    15,    23,    10,    22,    28,    54,    31,    35,    27,
    16,    16,    34,    44,    75,    19,    18,    19,    32,    13,
    53,    78,    72,    30,    73,    73,    70,    69,    71,    77,
    77,    43,    42,    69,    71,    16,     1,    33,    16,    16,
    16,    16,    34,    14,    27,    18,    80,    31,    54,    19,
    32,    70,    44,    75,    72,    30,    73,    53,    70,    17,
    12,    28,    29,    14,    16,    35,    27,    77,    11,     4,
    30,    13,     4,    76,    48,    29,    16,     3,    13,    16,
    16,    16,    16,    16,    16,    13,    16,    13,    13,    13,
    13,    16,    22,    13,    29,    78,     2,    13,    16,    16,
    13,    16,    35,    16,    49,    46,    10,    48,    70,    29,
    30,    13,    13,    13,    13,    23,    14,    70,    20,    14,
   nil,   nil,    21,   nil,    79,    16,    15,    19,    21,    16,
   nil,   nil,    29,   nil,    13,    16,    16,   nil,    13,    20,
    10,   nil,    21,    10,    48,   nil,    13,    16,    48,    29,
    48,   nil,    48,   nil,    48,   nil,    13,   nil,   nil,    16,
    10,    16,    16,   nil,   nil,   nil,    79,   nil,   nil,    29,
    13,    19,    79,    10,   nil,   nil,   nil,    16,   nil,   nil,
   nil,    16,    10,    47,    48,   nil,    16,   nil,    16,    29,
   nil,    16,    10,    16,   nil,    29,    19,   nil,   nil,   nil,
   nil,   nil,   nil,    79,   nil,    13,    29,    10,    79,    29,
    16,    16,    16,    16,    47,   nil,    47,    47,    47,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,
    10,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   nil,    10,    16,   nil,
   nil,    47,   nil,    16,   nil,   nil,   nil,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
    16,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,   nil,   nil,    16,   nil,    10,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    13,
    13,   nil,   nil,    16,    10,   nil,   nil,    10 ]

racc_goto_pointer = [
   nil,    36,    96,    77,    69,   nil,   nil,   nil,   nil,   nil,
     0,    58,    15,     0,   -59,   -10,     0,   -35,   -78,   -86,
  -145,  -165,  -122,   -62,   nil,   nil,   nil,   -61,   -10,   -98,
  -137,  -200,  -142,   -62,   -87,  -165,   nil,   nil,   nil,   nil,
   nil,   nil,  -198,  -200,  -218,   nil,  -168,   105,     0,    89,
   nil,   nil,   nil,   -86,  -134,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -83,
  -132,   -82,  -137,  -137,   nil,  -133,   -74,  -181,  -100,   -73,
  -166 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,     8,     9,
    62,   nil,   nil,   nil,   168,   nil,   195,   nil,   nil,   nil,
   nil,   225,   nil,    66,    67,    68,    69,   nil,    47,    63,
   232,   206,   nil,   nil,   nil,   306,   221,   222,   223,   224,
   226,   227,   nil,   nil,   nil,   273,   274,    74,    75,   nil,
    16,    17,    18,   nil,   141,    20,    21,    22,    23,    24,
    25,    26,    27,    29,    30,    31,    32,    33,    34,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   209,   nil,   196,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 39, :_reduce_none,
  1, 40, :_reduce_2,
  1, 41, :_reduce_3,
  2, 41, :_reduce_4,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  5, 46, :_reduce_10,
  3, 46, :_reduce_11,
  2, 46, :_reduce_12,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  0, 49, :_reduce_16,
  1, 49, :_reduce_none,
  0, 50, :_reduce_18,
  3, 50, :_reduce_19,
  1, 55, :_reduce_20,
  2, 55, :_reduce_21,
  5, 56, :_reduce_22,
  1, 57, :_reduce_23,
  2, 57, :_reduce_24,
  3, 57, :_reduce_25,
  0, 58, :_reduce_26,
  2, 58, :_reduce_27,
  3, 52, :_reduce_28,
  0, 60, :_reduce_29,
  1, 60, :_reduce_30,
  1, 53, :_reduce_31,
  2, 53, :_reduce_32,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  4, 62, :_reduce_36,
  6, 62, :_reduce_37,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  2, 69, :_reduce_60,
  1, 70, :_reduce_61,
  2, 70, :_reduce_62,
  0, 65, :_reduce_63,
  2, 65, :_reduce_64,
  3, 65, :_reduce_65,
  1, 71, :_reduce_66,
  2, 71, :_reduce_67,
  3, 72, :_reduce_68,
  1, 59, :_reduce_69,
  1, 59, :_reduce_70,
  1, 59, :_reduce_71,
  1, 59, :_reduce_72,
  1, 59, :_reduce_73,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  0, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_82,
  2, 78, :_reduce_83,
  2, 76, :_reduce_84,
  3, 76, :_reduce_85,
  1, 80, :_reduce_86,
  2, 80, :_reduce_87,
  2, 79, :_reduce_88,
  3, 79, :_reduce_89,
  1, 81, :_reduce_90,
  2, 81, :_reduce_91,
  3, 82, :_reduce_92,
  2, 77, :_reduce_93,
  3, 77, :_reduce_94,
  1, 83, :_reduce_95,
  2, 83, :_reduce_96,
  3, 84, :_reduce_97,
  1, 75, :_reduce_98,
  0, 51, :_reduce_99,
  1, 51, :_reduce_none,
  1, 85, :_reduce_101,
  2, 85, :_reduce_102,
  3, 86, :_reduce_103,
  3, 63, :_reduce_104,
  5, 64, :_reduce_105,
  3, 64, :_reduce_106,
  6, 47, :_reduce_107,
  0, 87, :_reduce_108,
  1, 87, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  5, 88, :_reduce_113,
  1, 91, :_reduce_none,
  2, 91, :_reduce_115,
  3, 92, :_reduce_116,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  6, 99, :_reduce_125,
  3, 99, :_reduce_126,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  4, 101, :_reduce_133,
  7, 102, :_reduce_134,
  8, 102, :_reduce_135,
  5, 102, :_reduce_136,
  4, 102, :_reduce_137,
  7, 103, :_reduce_138,
  4, 103, :_reduce_139,
  6, 104, :_reduce_140,
  4, 104, :_reduce_141,
  7, 105, :_reduce_142,
  4, 105, :_reduce_143,
  7, 106, :_reduce_144,
  4, 106, :_reduce_145,
  3, 93, :_reduce_146,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  8, 94, :_reduce_149,
  0, 109, :_reduce_150,
  1, 109, :_reduce_none,
  3, 107, :_reduce_152,
  2, 107, :_reduce_153,
  2, 107, :_reduce_154,
  1, 113, :_reduce_155,
  3, 113, :_reduce_156,
  1, 114, :_reduce_157,
  2, 114, :_reduce_158,
  5, 115, :_reduce_159,
  1, 111, :_reduce_160,
  2, 111, :_reduce_161,
  0, 116, :_reduce_162,
  3, 116, :_reduce_163,
  5, 117, :_reduce_164,
  0, 108, :_reduce_165,
  1, 108, :_reduce_166,
  2, 108, :_reduce_167,
  6, 95, :_reduce_168,
  1, 110, :_reduce_169,
  3, 110, :_reduce_170,
  5, 96, :_reduce_171,
  6, 97, :_reduce_172,
  6, 98, :_reduce_173,
  6, 90, :_reduce_174,
  1, 118, :_reduce_175,
  3, 118, :_reduce_176 ]

racc_reduce_n = 177

racc_shift_n = 312

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :NULL => 32,
  :DIR_SIGN => 33,
  :ELLIPSIS => 34,
  :EXTEND => 35,
  :AMP => 36,
  :PIPE => 37 }

racc_nt_base = 38

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "EXTEND",
  "AMP",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "executable_definition",
  "type_system_definition",
  "type_system_extension",
  "operation_definition",
  "fragment_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "literal_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "enum_value_definition",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "input_value",
  "null_value",
  "enum_value",
  "list_value",
  "object_literal_value",
  "variable",
  "object_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "object_literal_value_list",
  "object_literal_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "schema_extension",
  "type_extension",
  "scalar_type_extension",
  "object_type_extension",
  "interface_type_extension",
  "union_type_extension",
  "enum_type_extension",
  "input_object_type_extension",
  "implements",
  "field_definition_list",
  "implements_opt",
  "union_members",
  "input_value_definition_list",
  "type_definition_opt",
  "interfaces_list",
  "legacy_interfaces_list",
  "input_value_definition",
  "arguments_definitions_opt",
  "field_definition",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_11(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_12(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_25(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_27(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_29(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_30(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_31(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_32(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_36(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_37(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_60(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[0], directives: val[1], description: get_description(val[0]), position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_61(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_62(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_63(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_64(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_65(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_66(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_67(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_68(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_69(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_70(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_71(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_72(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_73(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_82(val, _values, result)
     return make_node(:NullValue, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_83(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_84(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_85(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_86(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_87(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_88(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_89(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_90(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_91(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_92(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_93(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_94(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_95(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_96(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_97(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_98(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_99(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_101(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_102(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_103(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_104(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_105(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_106(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_107(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 273)
  def _reduce_108(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_113(val, _values, result)
     return make_node(:SchemaDefinition, position_source: val[0], directives: val[1], **val[3]) 
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_115(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_116(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_125(val, _values, result)
     return make_node(:SchemaExtension, position_source: val[0], directives: val[2], **val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_126(val, _values, result)
     return make_node(:SchemaExtension, position_source: val[0], directives: val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_133(val, _values, result)
     return make_node(:ScalarTypeExtension, name: val[2], directives: val[3], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_134(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_135(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[6], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_136(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_137(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_138(val, _values, result)
     return make_node(:InterfaceTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_139(val, _values, result)
     return make_node(:InterfaceTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_140(val, _values, result)
     return make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_141(val, _values, result)
     return make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_142(val, _values, result)
     return make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 334)
  def _reduce_143(val, _values, result)
     return make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_144(val, _values, result)
     return make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_145(val, _values, result)
     return make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_146(val, _values, result)
     return make_node(:ScalarTypeDefinition, name: val[1], directives: val[2], description: get_description(val[0]), position_source: val[0]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_149(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[6], description: val[0] || get_description(val[1]), position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 352)
  def _reduce_150(val, _values, result)
     return [] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.y', 356)
  def _reduce_152(val, _values, result)
     return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_153(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_154(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_155(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_156(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 365)
  def _reduce_157(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_158(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1], position_source: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_159(val, _values, result)
            return make_node(:InputValueDefinition, name: val[0], type: val[2], default_value: val[3], directives: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_160(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_161(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_162(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_163(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_164(val, _values, result)
            return make_node(:FieldDefinition, name: val[0], arguments: val[1], type: val[3], directives: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_165(val, _values, result)
     return [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_166(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_167(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_168(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_169(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_170(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_171(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[1], directives: val[2], types: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_172(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[1], directives: val[2], values: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_173(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[1], directives: val[2], fields: val[4], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_174(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[2], arguments: val[3], locations: val[5], description: get_description(val[0]), position_source: val[0])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_175(val, _values, result)
     return [make_node(:DirectiveLocation, name: val[0].to_s, position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_176(val, _values, result)
     val[0] << make_node(:DirectiveLocation, name: val[2].to_s, position_source: val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
