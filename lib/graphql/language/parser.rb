#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 452)

EMPTY_ARRAY = [].freeze

def initialize(query_string, filename:, trace: Tracing::NullTrace)
  raise GraphQL::ParseError.new("No query string was present", nil, nil, query_string) if query_string.nil?
  @query_string = query_string
  @filename = filename
  @trace = trace
  @reused_next_token = [nil, nil]
end

def parse_document
  @document ||= begin
    # Break the string into tokens
    @trace.lex(query_string: @query_string) do
      @tokens ||= GraphQL::Language::Lexer.tokenize(@query_string)
    end
    # From the tokens, build an AST
    @trace.parse(query_string: @query_string) do
      if @tokens.empty?
        raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
      else
        do_parse
      end
    end
  end
end

class << self
  attr_accessor :cache

  def parse(query_string, filename: nil, trace: GraphQL::Tracing::NullTrace)
    new(query_string, filename: filename, trace: trace).parse_document
  end

  def parse_file(filename, trace: GraphQL::Tracing::NullTrace)
    if cache
      cache.fetch(filename) do
        parse(File.read(filename), filename: filename, trace: trace)
      end
    else
      parse(File.read(filename), filename: filename, trace: trace)
    end
  end
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    @reused_next_token[0] = lexer_token[0]
    @reused_next_token[1] = lexer_token
    @reused_next_token
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token[4]

    break if token.nil?
    break if token[0] != :COMMENT
    break if prev_token[1] != token[1] + 1

    comments.unshift(token[3].sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$" || lexer_token == nil
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string, filename: @filename)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string, filename: @filename)
    else
      line = lexer_token[1]
      col = lexer_token[2]
      if lexer_token[0] == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token[3].inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token[3].inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(Array) && value[0].is_a?(Symbol)
      assigns[key] = value[3]
    end
  end

  assigns[:filename] = @filename

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -2,  -172,    11,   282,    12,    13,    14,    11,  -101,    12,
    13,    14,    95,   270,   276,    94,    19,    38,    74,    75,
    76,    19,    77,    78,    79,    80,    15,    35,   162,   122,
    35,    15,    35,    12,    13,    14,    28,    35,   181,   277,
    72,    28,    35,    35,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    61,
    12,    13,    14,  -101,  -101,   280,   184,    72,    35,    88,
  -156,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    91,    12,    13,    14,
   281,    67,    90,    99,    35,    72,    72,  -101,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,   228,    12,    13,    14,    72,    67,    35,
   176,    12,    13,    14,    72,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,    81,    82,    67,    83,    84,    85,    86,
    87,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,   224,   103,    12,    13,
    14,    67,    72,   222,   118,    72,   223,   122,    72,   205,
    44,    45,    46,    47,    48,    49,    50,    51,    52,   202,
   203,   204,   212,   213,   209,   210,   211,   221,   224,    72,
    12,    13,    14,   133,    95,   222,   140,    72,   223,   260,
   144,   205,    44,    45,    46,    47,    48,    49,    50,    51,
    52,   202,   203,   204,   212,   213,   209,   210,   211,   221,
   224,   144,    12,    13,    14,    72,    72,   222,    72,    72,
   223,   286,   144,   205,    44,    45,    46,    47,    48,    49,
    50,    51,    52,   202,   203,   204,   212,   213,   209,   210,
   211,   221,   302,   144,    12,    13,    14,   231,    12,    13,
    14,    72,   223,    72,    72,   205,    44,    45,    46,    47,
    48,    49,    50,    51,    52,   202,   203,   204,   212,   213,
   209,   210,   211,   221,   224,   133,    12,    13,    14,   133,
    95,   222,   170,   171,   223,    72,    72,   205,    44,    45,
    46,    47,    48,    49,    50,    51,    52,   202,   203,   204,
   212,   213,   209,   210,   211,   221,   224,   178,    12,    13,
    14,    72,    72,   222,    72,  -156,   223,   190,   191,   205,
    44,    45,    46,    47,    48,    49,    50,    51,    52,   202,
   203,   204,   212,   213,   209,   210,   211,   221,   302,   192,
    12,    13,    14,    12,    13,    14,    72,    72,   223,   195,
   196,   205,    44,    45,    46,    47,    48,    49,    50,    51,
    52,   202,   203,   204,   212,   213,   209,   210,   211,   221,
    12,    13,    14,    12,    13,    14,   197,   198,   200,    72,
   226,    97,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,   263,    12,    13,    14,
    72,   133,   133,    72,   181,   238,    72,   181,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,   288,    12,    13,    14,    35,    35,   181,
   181,    35,    35,    35,   256,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
   292,    12,    13,    14,   133,   238,   273,   273,   283,   285,
   291,   198,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,   310,    12,    13,
    14,    72,   298,   303,   306,   307,   309,   285,    72,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,    72,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   131,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   168,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   131,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   131,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   131,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   205,    44,    45,    46,    47,    48,    49,
    50,    51,    52,   202,   203,   204,  -162,   nil,   nil,   nil,
  -162,   nil,   nil,   nil,   nil,   nil,  -162,   nil,  -162,  -162,
  -162 ]

racc_action_check = [
     3,   181,     3,   254,     3,     3,     3,     0,   104,     0,
     0,     0,    66,   233,   245,    66,     3,     1,    28,    28,
    28,     0,    28,    28,    28,    28,     3,   254,   120,   120,
   181,     0,     3,   144,   144,   144,     3,     0,   142,   246,
   104,     0,   233,   245,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,    11,
    11,    11,    11,   149,   151,   252,   144,    19,   246,    38,
   142,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    60,    60,    60,    60,
   253,    11,    40,    68,   252,   149,   151,   147,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    60,   174,   174,   174,   174,   147,    60,   253,
   137,   137,   137,   137,    70,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
   133,   133,   133,    37,    37,   174,    37,    37,    37,    37,
    37,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   170,    73,   170,   170,
   170,   133,    74,   170,    87,    89,   170,    90,    93,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   223,    96,
   223,   223,   223,    98,   101,   223,   105,   106,   223,   223,
   107,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   261,   108,   261,   261,   261,   109,   110,   261,   111,   112,
   261,   261,   113,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
   261,   261,   285,   114,   285,   285,   285,   179,   179,   179,
   179,   115,   285,   116,   117,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   291,   119,   291,   291,   291,   123,
   124,   291,   127,   129,   291,   132,   135,   291,   291,   291,
   291,   291,   291,   291,   291,   291,   291,   291,   291,   291,
   291,   291,   291,   291,   291,   291,   303,   139,   303,   303,
   303,   141,   143,   303,   145,   146,   303,   148,   150,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   306,   152,
   306,   306,   306,   103,   103,   103,   154,   156,   306,   157,
   158,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
    67,    67,    67,   140,   140,   140,   159,   160,   164,   167,
   172,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,   224,   224,   224,   224,
    67,   173,   175,   182,   183,   185,   188,   189,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   264,   264,   264,   264,   191,   192,   193,
   194,   196,   197,   198,   199,   264,   264,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
   267,   267,   267,   267,   201,   236,   241,   251,   255,   257,
   266,   269,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   267,   267,   267,   267,   267,   267,   302,   302,   302,
   302,   274,   279,   290,   294,   295,   299,   308,   312,   302,
   302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
   302,   302,   302,   302,    10,    10,    10,   313,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    15,    15,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    72,    72,    72,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    75,    75,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    77,    77,    77,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    78,    78,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    79,    79,    79,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    80,    80,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    81,    81,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    82,    82,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    83,    83,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    84,    84,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    85,    85,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    86,    86,
    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    94,    94,    94,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    94,    94,    94,    94,    94,
    94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
    95,    95,    95,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    97,    97,    97,   nil,
   nil,   nil,   nil,   nil,    97,   nil,   nil,    97,    97,    97,
    97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
    97,    97,    99,    99,    99,   nil,   nil,   nil,   nil,   nil,
    99,   nil,   nil,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,   118,   118,
   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   122,   122,   122,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   125,   125,   125,   nil,   125,   nil,   nil,   nil,   nil,   nil,
   nil,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   131,   131,   131,   nil,
   nil,   nil,   nil,   nil,   131,   nil,   nil,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   178,   178,   178,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   184,   184,
   184,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   186,   186,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   190,   190,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   195,   195,   195,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   200,   200,   200,   nil,   nil,   nil,   nil,   nil,
   200,   nil,   nil,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   222,   222,
   222,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   232,   232,   232,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   238,   238,   238,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   247,   247,   247,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   273,   273,   273,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   283,   283,
   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   283,
   283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
   283,   283,   283,   283,   298,   298,   298,   nil,   nil,   nil,
   nil,   nil,   298,   nil,   nil,   298,   298,   298,   298,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   307,   307,   307,   nil,   nil,   nil,   nil,   nil,   307,   nil,
   nil,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   309,   309,   309,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   309,   309,   309,
   309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
   309,   309,   243,   243,   243,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   187,   nil,   nil,   nil,
   187,   nil,   nil,   nil,   nil,   nil,   187,   nil,   187,   187,
   187 ]

racc_action_pointer = [
     5,    17,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   520,    56,   nil,   nil,   nil,   546,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,    69,   nil,
    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,   nil,   nil,   nil,   nil,   nil,     5,   386,    78,   nil,
    90,   nil,   572,   165,   138,   598,   624,   650,   676,   702,
   728,   754,   780,   806,   832,   858,   884,   140,   nil,   141,
   168,   nil,   nil,   144,   910,   936,   165,   962,   201,   988,
   nil,   197,   nil,   359,     6,   204,   173,   191,   212,   201,
   202,   204,   205,   223,   244,   237,   239,   240,  1014,   293,
    20,   nil,  1040,   297,   293,  1066,   nil,   292,   nil,   292,
   nil,  1092,   271,   136,   nil,   272,   nil,   117,   nil,   317,
   389,   297,    36,   298,    29,   300,   301,    83,   323,    61,
   336,    62,   357,   nil,   332,   nil,   333,   355,   368,   394,
   390,   nil,   nil,   nil,   388,   nil,   nil,   365,   nil,   nil,
   164,   nil,   387,   419,   110,   420,   nil,   nil,  1118,   264,
   nil,    -2,   389,   422,  1144,   388,  1170,  1521,   392,   425,
  1196,   415,   416,   447,   448,  1222,   419,   420,   421,   427,
  1248,   472,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1274,   196,   413,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1300,    10,   nil,   nil,   438,   nil,  1326,   nil,
   nil,   438,   nil,  1508,   nil,    11,    36,  1352,   nil,   nil,
   nil,   439,    62,    87,    -5,   463,   nil,   465,   nil,   nil,
   nil,   228,   nil,   nil,   440,   nil,   470,   467,   nil,   474,
   nil,   nil,   nil,  1378,   467,   nil,   nil,   nil,   nil,   492,
   nil,   nil,   nil,  1404,   nil,   260,   nil,   nil,   nil,   nil,
   493,   292,   nil,   nil,   494,   495,   nil,   nil,  1430,   468,
   nil,   nil,   494,   324,   nil,   nil,   356,  1456,   493,  1482,
   nil,   nil,   474,   493,   nil,   nil,   nil ]

racc_action_default = [
  -151,  -186,    -1,  -151,    -3,    -5,    -6,    -7,    -8,    -9,
   -16,  -186,   -13,   -14,   -15,  -109,  -111,  -112,  -113,  -100,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -186,  -130,
  -131,  -132,  -133,  -134,  -135,  -150,  -152,  -186,  -186,    -4,
   -18,   -17,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,
  -186,   -12,   -32,   -34,   -35,   -36,   -66,  -100,  -186,  -110,
  -101,  -102,  -186,  -115,  -100,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,   317,  -100,
  -186,   -11,   -33,  -100,  -186,  -186,  -100,  -186,  -186,  -186,
  -103,   -66,  -114,  -186,  -129,  -186,  -186,  -155,  -155,  -100,
  -100,  -100,  -100,  -155,  -155,  -100,  -100,  -100,  -186,  -186,
  -186,   -20,  -186,   -30,   -66,  -186,   -68,  -186,  -105,   -23,
   -25,  -186,  -100,  -186,  -107,  -100,  -104,  -186,  -117,  -186,
  -186,  -136,  -140,  -100,  -186,  -100,  -143,  -145,  -186,  -147,
  -186,  -149,  -186,  -153,  -100,  -156,  -100,  -186,  -186,  -186,
  -167,   -10,   -19,   -21,  -186,   -31,   -37,  -100,   -67,   -69,
  -186,   -24,  -186,  -186,  -186,  -186,  -116,  -118,  -186,  -186,
  -137,  -151,  -101,  -170,  -186,  -158,  -159,  -160,  -101,  -170,
  -186,  -151,  -151,  -170,  -170,  -186,  -151,  -151,  -151,  -182,
  -186,   -30,   -57,   -58,   -59,   -60,   -61,   -62,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,  -186,  -186,  -186,   -99,   -26,  -106,   -29,  -108,
  -119,  -128,  -186,  -151,  -173,  -138,  -157,  -160,  -186,  -163,
  -141,  -144,  -176,  -186,   -64,  -151,  -151,  -186,  -165,  -154,
  -175,  -178,  -151,  -151,  -151,  -186,  -183,   -27,   -38,   -84,
   -85,  -186,   -87,   -89,  -186,   -91,  -186,  -186,   -96,  -167,
  -171,  -174,  -161,  -186,  -100,   -65,  -146,  -148,  -166,  -186,
  -179,  -180,  -168,  -186,   -22,  -186,   -86,   -88,   -90,   -92,
  -186,  -186,   -95,   -97,  -186,  -186,  -177,   -63,  -186,  -181,
  -184,   -28,  -186,  -186,   -80,   -93,  -186,  -186,   -27,  -186,
   -94,   -98,  -100,  -100,  -185,  -169,  -164 ]

racc_goto_table = [
    10,    69,    60,    10,    37,    93,   208,    37,    41,    66,
   166,    92,   199,   207,   132,   234,   135,    73,   284,   177,
   265,   134,   185,   301,   278,   121,   126,   137,   275,   304,
     1,   278,   278,   246,     4,   275,   245,    39,   253,   254,
   136,   252,   161,     2,   311,   143,   145,     3,   172,   142,
   146,   154,   156,    96,   180,   163,   169,    40,    66,   262,
   289,   177,   236,   167,   179,    98,   207,   271,    89,   313,
   101,   120,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   100,   207,   119,   258,   274,
   125,   123,   124,   127,   128,   235,   227,   287,   229,   261,
   264,   240,   293,   139,   207,   249,   250,   148,   150,   152,
   153,    68,   102,   157,   158,   159,   160,   257,   186,   100,
   164,   295,   241,   127,   174,    92,   233,   251,   207,   255,
   173,    66,   299,   175,   207,   nil,   nil,   139,   nil,   nil,
   139,   183,   187,   189,   nil,   nil,   207,   nil,   nil,   207,
   nil,   nil,   193,   nil,   194,   nil,   100,   nil,   nil,   nil,
   nil,   nil,   100,   nil,   100,   201,   100,   nil,   nil,   104,
   206,   nil,    66,   nil,   nil,   nil,   230,   nil,   nil,   139,
   nil,   nil,   237,   nil,   239,   232,   nil,   nil,   242,   nil,
   nil,   nil,   nil,   242,   nil,   243,   nil,   100,   nil,   nil,
   243,   141,   nil,   100,   147,   149,   151,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   308,   nil,   nil,   nil,   nil,
   259,   nil,   266,   206,   312,   nil,   nil,   nil,   nil,   nil,
   269,   nil,   nil,   nil,   nil,   nil,   272,   232,   182,   nil,
   188,   nil,   nil,   206,   nil,   279,   nil,   nil,   nil,   243,
   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,   nil,   nil,
   nil,   206,   290,   nil,   nil,   294,   nil,   nil,   nil,   nil,
   nil,   296,   297,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   300,   nil,   nil,   nil,   206,   nil,   nil,   nil,   nil,
   nil,   206,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   294,   nil,   nil,   206,   nil,   nil,   206,   314,   nil,   nil,
   315,   316 ]

racc_goto_check = [
    10,    29,    15,    10,    33,    28,    37,    33,    16,    16,
    23,    24,    81,    30,    19,    82,    19,    13,    20,    57,
    46,    14,    78,    22,    80,    18,    36,    56,    32,    22,
     1,    80,    80,    76,     4,    32,    34,     4,    76,    76,
    28,    34,    14,     2,    22,    74,    74,     3,    19,    72,
    72,    74,    74,    29,    73,    18,    36,    11,    16,    37,
    46,    57,    78,    28,    56,    13,    30,    82,    12,    20,
    16,    17,    13,    16,    16,    16,    16,    16,    16,    16,
    16,    16,    16,    16,    16,    50,    30,    13,    23,    31,
    35,    13,    16,    16,    13,    73,    14,    37,    14,    44,
    45,    73,    48,    10,    30,    73,    73,    13,    13,    13,
    13,    51,    55,    13,    13,    13,    16,    19,    79,    50,
    16,    81,    75,    16,    15,    24,    83,    75,    30,    84,
    13,    16,    85,    13,    30,   nil,   nil,    10,   nil,   nil,
    10,    13,    16,    13,   nil,   nil,    30,   nil,   nil,    30,
   nil,   nil,    13,   nil,    13,   nil,    50,   nil,   nil,   nil,
   nil,   nil,    50,   nil,    50,    13,    50,   nil,   nil,    49,
    10,   nil,    16,   nil,   nil,   nil,    16,   nil,   nil,    10,
   nil,   nil,    16,   nil,    16,    33,   nil,   nil,    16,   nil,
   nil,   nil,   nil,    16,   nil,    33,   nil,    50,   nil,   nil,
    33,    49,   nil,    50,    49,    49,    49,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
    16,   nil,    16,    10,    19,   nil,   nil,   nil,   nil,   nil,
    16,   nil,   nil,   nil,   nil,   nil,    16,    33,    49,   nil,
    49,   nil,   nil,    10,   nil,    16,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,    10,    16,   nil,   nil,    16,   nil,   nil,   nil,   nil,
   nil,    16,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    16,   nil,   nil,    10,   nil,   nil,    10,    16,   nil,   nil,
    13,    13 ]

racc_goto_pointer = [
   nil,    30,    43,    47,    34,   nil,   nil,   nil,   nil,   nil,
     0,    47,    28,    -2,   -77,    -9,    -2,   -19,   -65,   -83,
  -239,   nil,  -262,  -113,   -49,   nil,   nil,   nil,   -61,   -14,
  -157,  -154,  -217,     4,  -155,    -5,   -69,  -164,   nil,   nil,
   nil,   nil,   nil,   nil,  -124,  -124,  -204,   nil,  -165,    95,
    15,    96,   nil,   nil,   nil,    39,   -76,  -118,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -58,   -88,   -62,   -68,  -159,   nil,  -122,   -26,
  -222,  -148,  -166,   -55,   -70,  -151 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,     8,     9,
    58,   nil,   nil,   nil,   165,   nil,   130,   nil,   nil,   nil,
   nil,   129,   218,   nil,    62,    63,    64,    65,   nil,    42,
    59,   225,   244,   247,   nil,   nil,   nil,   305,   214,   215,
   216,   217,   219,   220,   nil,   nil,   nil,   267,   268,    70,
    71,   nil,    16,    17,    18,   nil,   nil,   138,    20,    21,
    22,    23,    24,    25,    26,    27,    29,    30,    31,    32,
    33,    34,   155,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 40, :_reduce_none,
  1, 41, :_reduce_2,
  1, 42, :_reduce_3,
  2, 42, :_reduce_4,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  5, 47, :_reduce_10,
  3, 47, :_reduce_11,
  2, 47, :_reduce_12,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  0, 50, :_reduce_16,
  1, 50, :_reduce_none,
  0, 51, :_reduce_18,
  3, 51, :_reduce_19,
  1, 56, :_reduce_20,
  2, 56, :_reduce_21,
  5, 57, :_reduce_22,
  1, 58, :_reduce_23,
  2, 58, :_reduce_24,
  1, 60, :_reduce_25,
  3, 60, :_reduce_26,
  0, 59, :_reduce_27,
  2, 59, :_reduce_28,
  3, 53, :_reduce_29,
  0, 62, :_reduce_30,
  1, 62, :_reduce_31,
  1, 54, :_reduce_32,
  2, 54, :_reduce_33,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  4, 64, :_reduce_37,
  6, 64, :_reduce_38,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  3, 71, :_reduce_63,
  1, 73, :_reduce_64,
  2, 73, :_reduce_65,
  0, 67, :_reduce_66,
  3, 67, :_reduce_67,
  1, 74, :_reduce_68,
  2, 74, :_reduce_69,
  3, 75, :_reduce_70,
  1, 61, :_reduce_71,
  1, 61, :_reduce_72,
  1, 61, :_reduce_73,
  1, 61, :_reduce_74,
  1, 61, :_reduce_75,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_83,
  2, 81, :_reduce_84,
  2, 79, :_reduce_85,
  3, 79, :_reduce_86,
  1, 83, :_reduce_87,
  2, 83, :_reduce_88,
  2, 82, :_reduce_89,
  3, 82, :_reduce_90,
  1, 84, :_reduce_91,
  2, 84, :_reduce_92,
  3, 85, :_reduce_93,
  2, 80, :_reduce_94,
  3, 80, :_reduce_95,
  1, 86, :_reduce_96,
  2, 86, :_reduce_97,
  3, 87, :_reduce_98,
  1, 78, :_reduce_99,
  0, 52, :_reduce_100,
  1, 52, :_reduce_none,
  1, 88, :_reduce_102,
  2, 88, :_reduce_103,
  3, 89, :_reduce_104,
  3, 65, :_reduce_105,
  5, 66, :_reduce_106,
  3, 66, :_reduce_107,
  6, 48, :_reduce_108,
  0, 90, :_reduce_109,
  1, 90, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  3, 91, :_reduce_114,
  0, 94, :_reduce_115,
  3, 94, :_reduce_116,
  1, 95, :_reduce_none,
  2, 95, :_reduce_118,
  3, 96, :_reduce_119,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  6, 103, :_reduce_128,
  3, 103, :_reduce_129,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 105, :_reduce_136,
  5, 106, :_reduce_137,
  6, 106, :_reduce_138,
  5, 106, :_reduce_139,
  4, 106, :_reduce_140,
  6, 107, :_reduce_141,
  5, 107, :_reduce_142,
  4, 107, :_reduce_143,
  6, 108, :_reduce_144,
  4, 108, :_reduce_145,
  7, 109, :_reduce_146,
  4, 109, :_reduce_147,
  7, 110, :_reduce_148,
  4, 110, :_reduce_149,
  1, 116, :_reduce_none,
  0, 72, :_reduce_none,
  1, 72, :_reduce_none,
  4, 97, :_reduce_153,
  6, 98, :_reduce_154,
  0, 113, :_reduce_155,
  1, 113, :_reduce_none,
  3, 111, :_reduce_157,
  2, 111, :_reduce_158,
  2, 111, :_reduce_159,
  1, 117, :_reduce_160,
  3, 117, :_reduce_161,
  1, 118, :_reduce_162,
  2, 118, :_reduce_163,
  6, 119, :_reduce_164,
  1, 115, :_reduce_165,
  2, 115, :_reduce_166,
  0, 120, :_reduce_167,
  3, 120, :_reduce_168,
  6, 121, :_reduce_169,
  0, 112, :_reduce_170,
  3, 112, :_reduce_171,
  0, 122, :_reduce_172,
  1, 122, :_reduce_173,
  2, 122, :_reduce_174,
  6, 99, :_reduce_175,
  1, 114, :_reduce_176,
  3, 114, :_reduce_177,
  6, 100, :_reduce_178,
  7, 101, :_reduce_179,
  7, 102, :_reduce_180,
  8, 93, :_reduce_181,
  0, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 124, :_reduce_184,
  3, 124, :_reduce_185 ]

racc_reduce_n = 186

racc_shift_n = 317

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :REPEATABLE => 27,
  :TRUE => 28,
  :FALSE => 29,
  :FLOAT => 30,
  :INT => 31,
  :STRING => 32,
  :NULL => 33,
  :DIR_SIGN => 34,
  :ELLIPSIS => 35,
  :EXTEND => 36,
  :AMP => 37,
  :PIPE => 38 }

racc_nt_base = 39

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "REPEATABLE",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "EXTEND",
  "AMP",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "executable_definition",
  "type_system_definition",
  "type_system_extension",
  "operation_definition",
  "fragment_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "nullable_type",
  "literal_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "enum_value_definition",
  "description_opt",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "input_value",
  "null_value",
  "enum_value",
  "list_value",
  "object_literal_value",
  "variable",
  "object_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "object_literal_value_list",
  "object_literal_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list_opt",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "schema_extension",
  "type_extension",
  "scalar_type_extension",
  "object_type_extension",
  "interface_type_extension",
  "union_type_extension",
  "enum_type_extension",
  "input_object_type_extension",
  "implements",
  "field_definition_list_opt",
  "implements_opt",
  "union_members",
  "input_value_definition_list",
  "description",
  "interfaces_list",
  "legacy_interfaces_list",
  "input_value_definition",
  "arguments_definitions_opt",
  "field_definition",
  "field_definition_list",
  "directive_repeatable_opt",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     result = make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_11(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_12(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )

    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
            result = make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     result = make_node(:NonNullType, of_type: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_25(val, _values, result)
     result = make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     result = make_node(:ListType, of_type: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_27(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_29(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_30(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_31(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_32(val, _values, result)
     result = [result]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_33(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_37(val, _values, result)
                result = make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_38(val, _values, result)
                result = make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_63(val, _values, result)
     result = make_node(:EnumValueDefinition, name: val[1], directives: val[2], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_64(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_65(val, _values, result)
     result = val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_66(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_67(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_68(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_69(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_70(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_71(val, _values, result)
     result = val[0][3].to_f
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_72(val, _values, result)
     result = val[0][3].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_73(val, _values, result)
     result = val[0][3]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_74(val, _values, result)
     result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_75(val, _values, result)
     result = false
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_83(val, _values, result)
     result = make_node(:NullValue, name: val[0], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_84(val, _values, result)
     result = make_node(:VariableIdentifier, name: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_85(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_86(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_87(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_88(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_89(val, _values, result)
     result = make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_90(val, _values, result)
     result = make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_91(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_92(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_93(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_94(val, _values, result)
     result = make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_95(val, _values, result)
     result = make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_96(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_97(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_98(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_99(val, _values, result)
     result = make_node(:Enum, name: val[0], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_100(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_102(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_103(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 241)
  def _reduce_104(val, _values, result)
     result = make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_105(val, _values, result)
     result = make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 248)
  def _reduce_106(val, _values, result)
            result = make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_107(val, _values, result)
            result = make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_108(val, _values, result)
          result = make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_109(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_114(val, _values, result)
     result = make_node(:SchemaDefinition, position_source: val[0], definition_line: val[0][1], directives: val[1], **val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_115(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_116(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_118(val, _values, result)
     result = val[0].merge(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_119(val, _values, result)
     result = { val[0][3].to_sym => val[2] }
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_128(val, _values, result)
     result = make_node(:SchemaExtension, position_source: val[0], directives: val[2], **val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_129(val, _values, result)
     result = make_node(:SchemaExtension, position_source: val[0], directives: val[2])
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_136(val, _values, result)
     result = make_node(:ScalarTypeExtension, name: val[2], directives: val[3], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_137(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: val[4], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_138(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_139(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_140(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_141(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 334)
  def _reduce_142(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_143(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_144(val, _values, result)
     result = make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_145(val, _values, result)
     result = make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 342)
  def _reduce_146(val, _values, result)
     result = make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_147(val, _values, result)
     result = make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 346)
  def _reduce_148(val, _values, result)
     result = make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_149(val, _values, result)
     result = make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0])
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_153(val, _values, result)
            result = make_node(:ScalarTypeDefinition, name: val[2], directives: val[3], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_154(val, _values, result)
            result = make_node(:ObjectTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_155(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_157(val, _values, result)
     result = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_158(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_159(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_160(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_161(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_162(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_163(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1], position_source: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_164(val, _values, result)
            result = make_node(:InputValueDefinition, name: val[1], type: val[3], default_value: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_165(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_166(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_167(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_168(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_169(val, _values, result)
            result = make_node(:FieldDefinition, name: val[1], arguments: val[2], type: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_170(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_171(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 405)
  def _reduce_172(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_173(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_174(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_175(val, _values, result)
            result = make_node(:InterfaceTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 415)
  def _reduce_176(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_177(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 420)
  def _reduce_178(val, _values, result)
            result = make_node(:UnionTypeDefinition, name: val[2], directives: val[3], types: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 425)
  def _reduce_179(val, _values, result)
             result = make_node(:EnumTypeDefinition, name: val[2], directives: val[3], values: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_180(val, _values, result)
            result = make_node(:InputObjectTypeDefinition, name: val[2], directives: val[3], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_181(val, _values, result)
            result = make_node(:DirectiveDefinition, name: val[3], arguments: val[4], locations: val[7], repeatable: !!val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.y', 443)
  def _reduce_184(val, _values, result)
     result = [make_node(:DirectiveLocation, name: val[0][3], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 444)
  def _reduce_185(val, _values, result)
     val[0] << make_node(:DirectiveLocation, name: val[2][3], position_source: val[2])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module Language
end   # module GraphQL
