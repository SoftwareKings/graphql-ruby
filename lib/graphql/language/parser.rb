#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 434)

EMPTY_ARRAY = [].freeze

def initialize(query_string, filename:, tracer: Tracing::NullTracer)
  raise GraphQL::ParseError.new("No query string was present", nil, nil, query_string) if query_string.nil?
  @query_string = query_string
  @filename = filename
  @tracer = tracer
end

def parse_document
  @document ||= begin
    # Break the string into tokens
    @tracer.trace("lex", {query_string: @query_string}) do
      @tokens ||= GraphQL.scan(@query_string)
    end
    # From the tokens, build an AST
    @tracer.trace("parse", {query_string: @query_string}) do
      if @tokens.empty?
        raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
      else
        do_parse
      end
    end
  end
end

def self.parse(query_string, filename: nil, tracer: GraphQL::Tracing::NullTracer)
  self.new(query_string, filename: filename, tracer: tracer).parse_document
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    [lexer_token.name, lexer_token]
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token.prev_token

    break if token.nil?
    break if token.name != :COMMENT
    break if prev_token.line != token.line + 1

    comments.unshift(token.to_s.sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$" || lexer_token == nil
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string, filename: @filename)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string, filename: @filename)
    else
      line, col = lexer_token.line_and_column
      if lexer_token.name == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token.to_s.inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(GraphQL::Language::Token)
      assigns[key] = value.to_s
    end
  end

  assigns[:filename] = @filename

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -2,  -164,    11,   -98,    12,    13,    14,   279,    11,   -98,
    12,    13,    14,   -98,   -98,   -98,    19,   177,   168,   272,
   168,   283,    19,   168,   168,   221,    15,   283,    71,    35,
    35,    35,    15,    71,    71,    28,   -98,    35,    12,    13,
    14,    28,    71,  -164,    71,    71,    71,    35,  -150,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,   222,    12,    13,    14,    71,  -164,  -164,
   180,    35,   298,   159,   120,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    60,
    12,    13,    14,   294,    66,   262,    35,    35,  -164,    38,
    35,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    90,    12,    13,    14,   278,
    66,    35,   277,    35,   267,   276,    35,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,   218,    71,    12,    13,    14,    66,    35,   216,   271,
    35,   217,    35,    35,   199,    44,    45,    46,    47,    48,
    49,    50,    51,    52,   197,   198,   206,   207,   203,   204,
   205,   215,   218,    87,    12,    13,    14,    35,    94,   216,
    89,    93,   217,   253,    98,   199,    44,    45,    46,    47,
    48,    49,    50,    51,    52,   197,   198,   206,   207,   203,
   204,   205,   215,   301,    71,    12,    13,    14,   173,    12,
    13,    14,   101,   217,    71,   116,   199,    44,    45,    46,
    47,    48,    49,    50,    51,    52,   197,   198,   206,   207,
   203,   204,   205,   215,   218,    71,    12,    13,    14,   120,
    71,   216,    71,   130,   217,    94,   137,   199,    44,    45,
    46,    47,    48,    49,    50,    51,    52,   197,   198,   206,
   207,   203,   204,   205,   215,   301,    71,    12,    13,    14,
   225,    12,    13,    14,   141,   217,    71,    71,   199,    44,
    45,    46,    47,    48,    49,    50,    51,    52,   197,   198,
   206,   207,   203,   204,   205,   215,   218,    71,    12,    13,
    14,    71,    71,   216,   141,    71,   217,    71,   168,   199,
    44,    45,    46,    47,    48,    49,    50,    51,    52,   197,
   198,   206,   207,   203,   204,   205,   215,    12,    13,    14,
    71,   168,    12,    13,    14,    12,    13,    14,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,   218,    71,    12,    13,    14,    66,    71,   216,
    71,   130,   217,   284,   130,   199,    44,    45,    46,    47,
    48,    49,    50,    51,    52,   197,   198,   206,   207,   203,
   204,   205,   215,    12,    13,    14,    80,    81,    94,    82,
    83,    84,    85,    86,    96,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,   286,    12,
    13,    14,    71,   167,   175,    71,    71,   184,   185,   186,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,   256,    12,    13,    14,    73,    74,
    75,   187,    76,    77,    78,    79,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
   290,    12,    13,    14,    71,   189,   190,   191,   192,   193,
   195,    71,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,   309,    12,    13,    14,
   130,   130,   229,   232,    35,    35,   243,    35,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,    35,    35,   249,   130,   232,
   268,   268,   289,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   193,    71,   297,   299,   302,   305,   306,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   129,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   165,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   199,    44,    45,    46,    47,    48,    49,
    50,    51,    52,   197,   198,  -156,   nil,   nil,   nil,  -156,
   nil,   nil,   nil,   nil,   nil,  -156,   nil,  -156,  -156 ]

racc_action_check = [
     3,   243,     3,   146,     3,     3,     3,   248,     0,   144,
     0,     0,     0,   178,   148,   142,     3,   139,   307,   240,
   132,   307,     0,   170,   250,   170,     3,   250,   144,   243,
   248,     3,     0,   312,   146,     3,   102,     0,   141,   141,
   141,     0,   132,   177,   178,   148,   142,   240,   139,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   171,   171,   171,   171,   102,   184,   189,
   141,   177,   275,   118,   118,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,    11,
    11,    11,    11,   265,   171,   226,   184,   189,   229,     1,
   275,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    59,    59,    59,    59,   247,
    11,   265,   246,   226,   234,   244,   229,    59,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,   167,    19,   167,   167,   167,    59,   247,   167,   239,
   246,   167,   234,   244,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   217,    38,   217,   217,   217,   239,    65,   217,
    40,    65,   217,   217,    67,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   305,    69,   305,   305,   305,   134,   134,
   134,   134,    72,   305,    73,    86,   305,   305,   305,   305,
   305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
   305,   305,   305,   305,   302,    88,   302,   302,   302,    89,
    92,   302,    95,    97,   302,   100,   103,   302,   302,   302,
   302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
   302,   302,   302,   302,   302,   283,   104,   283,   283,   283,
   176,   176,   176,   176,   105,   283,   106,   107,   283,   283,
   283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
   283,   283,   283,   283,   283,   283,   289,   108,   289,   289,
   289,   109,   110,   289,   111,   112,   289,   113,   311,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   130,   130,   130,
   311,   128,   101,   101,   101,   137,   137,   137,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   254,   128,   254,   254,   254,   130,   114,   254,
   115,   117,   254,   254,   121,   254,   254,   254,   254,   254,
   254,   254,   254,   254,   254,   254,   254,   254,   254,   254,
   254,   254,   254,    66,    66,    66,    37,    37,   122,    37,
    37,    37,    37,    37,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,   257,   257,
   257,   257,    66,   125,   136,   138,   140,   143,   145,   147,
   257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   218,   218,   218,   218,    28,    28,
    28,   149,    28,    28,    28,    28,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   260,   260,   260,   260,   151,   153,   154,   155,   156,   157,
   161,   164,   260,   260,   260,   260,   260,   260,   260,   260,
   260,   260,   260,   260,   260,   260,   301,   301,   301,   301,
   169,   172,   179,   181,   186,   187,   188,   191,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   180,   180,   180,   192,   193,   194,   196,   230,
   235,   245,   259,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,    10,    10,    10,
   264,   269,   274,   280,   288,   292,   293,   nil,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,   232,   232,   232,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   232,   232,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   120,   120,   120,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,    80,    80,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,   306,   306,   306,
   nil,   nil,   nil,   nil,   nil,   306,   nil,   nil,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,    79,    79,    79,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,   185,   185,   185,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,    93,    93,    93,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    93,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,   182,   182,   182,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,    94,    94,    94,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    94,    94,    94,    94,    94,    94,    94,
    94,    94,    94,    94,    94,    94,    94,    78,    78,    78,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    85,    85,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    96,    96,    96,
   nil,   nil,   nil,   nil,   nil,    96,   nil,   nil,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
    96,    96,    77,    77,    77,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    15,    15,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    98,    98,    98,   nil,   nil,   nil,   nil,   nil,
    98,   nil,   nil,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,   175,   175,   175,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,    71,    71,    71,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    74,    74,    74,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    76,    76,    76,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,   241,   241,   241,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   249,   249,   249,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   249,   249,   249,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   249,   227,   227,   227,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   216,   216,   216,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   123,   123,   123,
   nil,   123,   nil,   nil,   nil,   nil,   nil,   nil,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,    75,    75,    75,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,   195,   195,   195,
   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   268,   268,   268,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   129,   129,   129,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,    84,    84,    84,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,   116,   116,   116,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,    83,    83,    83,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    82,    82,    82,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,   190,   190,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   297,   297,   297,
   nil,   nil,   nil,   nil,   nil,   297,   nil,   nil,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   299,   299,   299,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   299,   299,    81,    81,    81,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,   237,   237,   237,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   183,   nil,   nil,   nil,   183,
   nil,   nil,   nil,   nil,   nil,   183,   nil,   183,   183 ]

racc_action_pointer = [
     6,    99,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   533,    86,   nil,   nil,   nil,   883,   nil,   nil,   nil,   109,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   422,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   369,   173,   nil,
   173,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   112,
   nil,   nil,   nil,   nil,   nil,   171,   379,   169,   nil,   171,
   nil,   958,   210,   181,   983,  1158,  1008,   858,   783,   658,
   608,  1433,  1333,  1308,  1258,   808,   182,   nil,   202,   230,
   nil,   nil,   207,   708,   758,   209,   833,   241,   908,   nil,
   238,   328,    34,   244,   233,   255,   243,   244,   264,   268,
   269,   285,   272,   274,   325,   327,  1283,   359,    65,   nil,
   583,   362,   381,  1133,   nil,   403,   nil,   nil,   320,  1233,
   323,   nil,     9,   nil,   205,   nil,   404,   331,   382,    15,
   383,    34,    13,   415,    -5,   404,     1,   417,    12,   439,
   nil,   431,   nil,   463,   452,   465,   466,   462,   nil,   nil,
   nil,   460,   nil,   nil,   438,   nil,   nil,   139,   nil,   488,
    12,    60,   489,   nil,   nil,   933,   267,    40,    11,   490,
   508,   457,   733,  1470,    65,   683,   463,   464,   494,    66,
  1358,   466,   484,   485,   502,  1183,   516,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1108,   170,   431,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    92,  1083,   nil,    95,
   483,   nil,   558,   nil,   121,   483,   nil,  1458,   nil,   146,
    16,  1033,   nil,    -2,   122,   484,   119,   116,    -1,  1058,
    13,   nil,   nil,   nil,   350,   nil,   nil,   405,   nil,   512,
   457,   nil,   nil,   nil,   533,    90,   nil,   nil,  1208,   508,
   nil,   nil,   nil,   nil,   532,    69,   nil,   nil,   nil,   nil,
   506,   nil,   nil,   263,   nil,   nil,   nil,   nil,   534,   294,
   nil,   nil,   535,   536,   nil,   nil,   nil,  1383,   nil,  1408,
   nil,   483,   232,   nil,   nil,   201,   633,     7,   nil,   nil,
   nil,   297,     0,   nil,   nil ]

racc_action_default = [
  -145,  -176,    -1,  -145,    -3,    -5,    -6,    -7,    -8,    -9,
   -16,  -176,   -13,   -14,   -15,  -106,  -108,  -109,  -110,   -97,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -176,  -125,
  -126,  -127,  -128,  -129,  -130,  -144,  -146,  -176,  -176,    -4,
   -18,   -17,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,  -176,
   -12,   -31,   -33,   -34,   -35,   -63,   -97,  -176,  -107,   -98,
   -99,  -176,  -176,   -97,  -176,  -176,  -176,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,  -176,  -176,   315,   -97,  -176,
   -11,   -32,   -97,  -176,  -176,   -97,  -176,  -176,  -176,  -100,
   -63,  -176,  -124,  -176,  -176,  -149,   -97,   -97,   -97,   -97,
   -97,  -149,   -97,   -97,   -97,   -97,  -176,  -176,  -176,   -20,
  -176,   -29,   -63,  -176,   -65,  -176,  -102,   -23,   -97,  -176,
  -176,  -104,   -97,  -101,  -176,  -112,  -176,  -176,  -131,  -135,
   -97,  -176,  -137,  -176,  -139,  -176,  -141,  -176,  -143,  -176,
  -147,   -97,  -150,  -176,  -176,  -176,  -176,  -161,   -10,   -19,
   -21,  -176,   -30,   -36,   -97,   -64,   -66,  -176,   -24,  -176,
  -176,  -176,  -176,  -111,  -113,  -176,  -176,  -145,  -134,  -176,
  -176,  -152,  -153,  -154,  -145,  -176,  -145,  -145,  -176,  -145,
  -176,  -145,  -145,  -145,  -176,  -176,   -29,   -55,   -56,   -57,
   -58,   -59,   -67,   -68,   -69,   -70,   -71,   -72,   -73,   -74,
   -75,   -76,   -77,   -78,   -79,   -80,  -176,  -176,  -176,   -96,
  -103,   -25,   -28,  -105,  -114,  -123,  -145,  -176,  -165,  -145,
  -151,  -154,  -176,  -157,  -145,  -138,  -168,  -176,   -61,  -145,
  -145,  -176,  -159,  -145,  -145,  -170,  -145,  -145,  -145,  -176,
   -26,   -37,   -81,   -82,  -176,   -84,   -86,  -176,   -88,  -176,
  -176,   -93,  -132,  -166,  -161,  -145,  -155,  -136,  -176,   -97,
   -62,  -140,  -142,  -160,  -176,  -145,  -167,  -171,  -172,  -162,
  -173,  -174,   -22,  -176,   -83,   -85,   -87,   -89,  -176,  -176,
   -92,   -94,  -176,  -176,  -133,  -169,   -60,  -176,  -148,  -176,
   -27,  -176,  -176,   -77,   -90,  -176,  -176,   -26,  -175,   -91,
   -95,   -97,   -97,  -163,  -158 ]

racc_goto_table = [
    10,    72,    59,    10,   128,   194,   132,    91,   102,    68,
    37,   131,   202,    37,   226,   282,   174,   258,   163,    92,
   181,   234,   263,   124,   119,   273,   244,   134,   201,   270,
   263,   158,   273,   273,   269,     4,   270,   170,    39,   138,
   263,   142,   144,   146,   148,   235,   118,     2,    97,    88,
   245,    99,   166,   160,   133,   103,   287,   280,   174,   230,
    95,   263,   255,   176,   239,     1,   265,   139,    40,   246,
   117,   263,   312,   152,   121,   178,   164,   126,   201,   140,
   275,   182,     3,   220,    99,   151,   223,   257,   143,   145,
   147,   149,   150,   251,   153,   154,   155,   156,   201,   285,
   291,   136,   240,   250,   254,   300,   123,   247,   248,    67,
   169,   303,   293,   nil,   172,   201,    41,    65,   nil,    91,
    99,   171,   179,   nil,    99,   nil,    99,   310,    99,   nil,
    99,   nil,   nil,   188,   136,   nil,   nil,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   196,   nil,   nil,   nil,
   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    99,   nil,   nil,   201,   nil,    65,   201,   200,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   136,   100,   nil,   nil,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   nil,   nil,   nil,   nil,   237,   241,   nil,   122,
   125,   237,   241,   241,   nil,   307,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   311,   nil,   nil,   200,   nil,   nil,
   nil,   nil,   157,   nil,   nil,   nil,   161,   nil,   nil,   125,
   nil,   nil,   nil,   nil,   nil,   nil,    65,   200,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,   237,
   241,   296,   nil,   nil,   200,   nil,   237,   241,   241,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,
   nil,   224,   nil,   200,   nil,   nil,   231,   nil,   233,   200,
   nil,   236,   nil,   313,   314,   nil,   236,   nil,   nil,   nil,
   nil,   nil,   200,   nil,   nil,   200,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   252,   nil,   259,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   266,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   281,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   288,   nil,   nil,   292,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   295,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   308,   nil,   292 ]

racc_goto_check = [
    10,    13,    15,    10,    19,    79,    19,    23,    48,    28,
    32,    14,    36,    32,    71,    20,    55,    45,    22,    27,
    76,    71,    80,    35,    18,    78,    71,    54,    29,    31,
    80,    14,    78,    78,    30,     4,    31,    19,     4,    48,
    80,    48,    48,    48,    48,    73,    17,     2,    13,    12,
    73,    49,    35,    18,    27,    13,    45,    81,    55,    76,
    28,    80,    36,    54,    33,     1,    71,    70,    11,    33,
    13,    80,    20,    70,    13,    48,    27,    13,    29,    72,
    71,    77,     3,    14,    49,    72,    14,    44,    13,    13,
    13,    13,    13,    22,    13,    13,    13,    13,    29,    36,
    47,    10,    74,    19,    43,    21,    34,    74,    74,    50,
    13,    21,    79,   nil,    13,    29,    16,    16,   nil,    23,
    49,    15,    13,   nil,    49,   nil,    49,    21,    49,   nil,
    49,   nil,   nil,    13,    10,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    13,   nil,   nil,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,   nil,   nil,    29,   nil,    16,    29,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    16,   nil,   nil,
    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
    16,    16,   nil,   nil,   nil,   nil,    32,    32,   nil,    16,
    16,    32,    32,    32,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,    10,   nil,   nil,
   nil,   nil,    16,   nil,   nil,   nil,    16,   nil,   nil,    16,
   nil,   nil,   nil,   nil,   nil,   nil,    16,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,    32,
    32,    13,   nil,   nil,    10,   nil,    32,    32,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   nil,    16,   nil,    10,   nil,   nil,    16,   nil,    16,    10,
   nil,    16,   nil,    13,    13,   nil,    16,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,   nil,    16,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    16,   nil,    16 ]

racc_goto_pointer = [
   nil,    65,    47,    82,    35,   nil,   nil,   nil,   nil,   nil,
     0,    58,     9,   -18,   -86,    -9,   106,   -43,   -65,   -92,
  -235,  -178,  -103,   -52,   nil,   nil,   nil,   -46,    -6,  -139,
  -203,  -210,    10,  -122,    12,   -71,  -155,   nil,   nil,   nil,
   nil,   nil,   nil,  -113,  -131,  -201,   nil,  -160,   -65,   -18,
    94,   nil,   nil,   nil,   -74,  -118,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -38,  -163,   -26,  -140,   -85,   nil,  -121,   -60,  -215,  -152,
  -204,  -192 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,     8,     9,
    57,   nil,   nil,   nil,   162,   nil,   127,   nil,   nil,   nil,
   nil,   212,   nil,    61,    62,    63,    64,   nil,    42,    58,
   219,   238,   227,   nil,   nil,   nil,   304,   208,   209,   210,
   211,   213,   214,   nil,   nil,   nil,   260,   261,    69,    70,
   nil,    16,    17,    18,   nil,   135,    20,    21,    22,    23,
    24,    25,    26,    27,    29,    30,    31,    32,    33,    34,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   242,   nil,
   228,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 39, :_reduce_none,
  1, 40, :_reduce_2,
  1, 41, :_reduce_3,
  2, 41, :_reduce_4,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  5, 46, :_reduce_10,
  3, 46, :_reduce_11,
  2, 46, :_reduce_12,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  0, 49, :_reduce_16,
  1, 49, :_reduce_none,
  0, 50, :_reduce_18,
  3, 50, :_reduce_19,
  1, 55, :_reduce_20,
  2, 55, :_reduce_21,
  5, 56, :_reduce_22,
  1, 57, :_reduce_23,
  2, 57, :_reduce_24,
  3, 57, :_reduce_25,
  0, 58, :_reduce_26,
  2, 58, :_reduce_27,
  3, 52, :_reduce_28,
  0, 60, :_reduce_29,
  1, 60, :_reduce_30,
  1, 53, :_reduce_31,
  2, 53, :_reduce_32,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  4, 62, :_reduce_36,
  6, 62, :_reduce_37,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  3, 69, :_reduce_60,
  1, 71, :_reduce_61,
  2, 71, :_reduce_62,
  0, 65, :_reduce_63,
  3, 65, :_reduce_64,
  1, 72, :_reduce_65,
  2, 72, :_reduce_66,
  3, 73, :_reduce_67,
  1, 59, :_reduce_68,
  1, 59, :_reduce_69,
  1, 59, :_reduce_70,
  1, 59, :_reduce_71,
  1, 59, :_reduce_72,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 75, :_reduce_80,
  2, 79, :_reduce_81,
  2, 77, :_reduce_82,
  3, 77, :_reduce_83,
  1, 81, :_reduce_84,
  2, 81, :_reduce_85,
  2, 80, :_reduce_86,
  3, 80, :_reduce_87,
  1, 82, :_reduce_88,
  2, 82, :_reduce_89,
  3, 83, :_reduce_90,
  2, 78, :_reduce_91,
  3, 78, :_reduce_92,
  1, 84, :_reduce_93,
  2, 84, :_reduce_94,
  3, 85, :_reduce_95,
  1, 76, :_reduce_96,
  0, 51, :_reduce_97,
  1, 51, :_reduce_none,
  1, 86, :_reduce_99,
  2, 86, :_reduce_100,
  3, 87, :_reduce_101,
  3, 63, :_reduce_102,
  5, 64, :_reduce_103,
  3, 64, :_reduce_104,
  6, 47, :_reduce_105,
  0, 88, :_reduce_106,
  1, 88, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  5, 89, :_reduce_111,
  1, 92, :_reduce_none,
  2, 92, :_reduce_113,
  3, 93, :_reduce_114,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  6, 100, :_reduce_123,
  3, 100, :_reduce_124,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 102, :_reduce_131,
  7, 103, :_reduce_132,
  8, 103, :_reduce_133,
  5, 103, :_reduce_134,
  4, 103, :_reduce_135,
  7, 104, :_reduce_136,
  4, 104, :_reduce_137,
  6, 105, :_reduce_138,
  4, 105, :_reduce_139,
  7, 106, :_reduce_140,
  4, 106, :_reduce_141,
  7, 107, :_reduce_142,
  4, 107, :_reduce_143,
  1, 113, :_reduce_none,
  0, 70, :_reduce_none,
  1, 70, :_reduce_none,
  4, 94, :_reduce_147,
  8, 95, :_reduce_148,
  0, 110, :_reduce_149,
  1, 110, :_reduce_none,
  3, 108, :_reduce_151,
  2, 108, :_reduce_152,
  2, 108, :_reduce_153,
  1, 114, :_reduce_154,
  3, 114, :_reduce_155,
  1, 115, :_reduce_156,
  2, 115, :_reduce_157,
  6, 116, :_reduce_158,
  1, 112, :_reduce_159,
  2, 112, :_reduce_160,
  0, 117, :_reduce_161,
  3, 117, :_reduce_162,
  6, 118, :_reduce_163,
  0, 109, :_reduce_164,
  1, 109, :_reduce_165,
  2, 109, :_reduce_166,
  7, 96, :_reduce_167,
  1, 111, :_reduce_168,
  3, 111, :_reduce_169,
  6, 97, :_reduce_170,
  7, 98, :_reduce_171,
  7, 99, :_reduce_172,
  7, 91, :_reduce_173,
  1, 119, :_reduce_174,
  3, 119, :_reduce_175 ]

racc_reduce_n = 176

racc_shift_n = 315

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :TRUE => 27,
  :FALSE => 28,
  :FLOAT => 29,
  :INT => 30,
  :STRING => 31,
  :NULL => 32,
  :DIR_SIGN => 33,
  :ELLIPSIS => 34,
  :EXTEND => 35,
  :AMP => 36,
  :PIPE => 37 }

racc_nt_base = 38

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "TRUE",
  "FALSE",
  "FLOAT",
  "INT",
  "STRING",
  "NULL",
  "DIR_SIGN",
  "ELLIPSIS",
  "EXTEND",
  "AMP",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "executable_definition",
  "type_system_definition",
  "type_system_extension",
  "operation_definition",
  "fragment_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "literal_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "enum_value_definition",
  "description_opt",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "input_value",
  "null_value",
  "enum_value",
  "list_value",
  "object_literal_value",
  "variable",
  "object_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "object_literal_value_list",
  "object_literal_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "schema_extension",
  "type_extension",
  "scalar_type_extension",
  "object_type_extension",
  "interface_type_extension",
  "union_type_extension",
  "enum_type_extension",
  "input_object_type_extension",
  "implements",
  "field_definition_list",
  "implements_opt",
  "union_members",
  "input_value_definition_list",
  "description",
  "interfaces_list",
  "legacy_interfaces_list",
  "input_value_definition",
  "arguments_definitions_opt",
  "field_definition",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     return make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     return [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
            return  make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_11(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_12(val, _values, result)
            return make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )
      
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
            return make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     return make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     return make_node(:NonNullType, of_type: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_25(val, _values, result)
     return make_node(:ListType, of_type: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     return nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_27(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_29(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_30(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_31(val, _values, result)
     return [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_32(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_36(val, _values, result)
                return make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_37(val, _values, result)
                return make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )
          
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_60(val, _values, result)
     return make_node(:EnumValueDefinition, name: val[1], directives: val[2], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_61(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_62(val, _values, result)
     return val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_63(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_64(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_65(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_66(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_67(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_68(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_69(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_70(val, _values, result)
     return val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_71(val, _values, result)
     return true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_72(val, _values, result)
     return false 
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.y', 192)
  def _reduce_80(val, _values, result)
     return make_node(:NullValue, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_81(val, _values, result)
     return make_node(:VariableIdentifier, name: val[1], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_82(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_83(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_84(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_85(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_86(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_87(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_88(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_89(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_90(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_91(val, _values, result)
     return make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_92(val, _values, result)
     return make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_93(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_94(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_95(val, _values, result)
     return make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_96(val, _values, result)
     return make_node(:Enum, name: val[0], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_97(val, _values, result)
     return  EMPTY_ARRAY 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_99(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_100(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_101(val, _values, result)
     return make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_102(val, _values, result)
     return make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_103(val, _values, result)
            return make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 251)
  def _reduce_104(val, _values, result)
            return make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_105(val, _values, result)
          return make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_106(val, _values, result)
     return nil 
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_111(val, _values, result)
     return make_node(:SchemaDefinition, position_source: val[0], definition_line: val[0].line, directives: val[1], **val[3]) 
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_113(val, _values, result)
     return val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_114(val, _values, result)
     return { val[0].to_s.to_sym => val[2] } 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_123(val, _values, result)
     return make_node(:SchemaExtension, position_source: val[0], directives: val[2], **val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_124(val, _values, result)
     return make_node(:SchemaExtension, position_source: val[0], directives: val[2]) 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_131(val, _values, result)
     return make_node(:ScalarTypeExtension, name: val[2], directives: val[3], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_132(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_133(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[6], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_134(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 321)
  def _reduce_135(val, _values, result)
     return make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_136(val, _values, result)
     return make_node(:InterfaceTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_137(val, _values, result)
     return make_node(:InterfaceTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_138(val, _values, result)
     return make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_139(val, _values, result)
     return make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_140(val, _values, result)
     return make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_141(val, _values, result)
     return make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: [], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_142(val, _values, result)
     return make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_143(val, _values, result)
     return make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0]) 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_147(val, _values, result)
            return make_node(:ScalarTypeDefinition, name: val[2], directives: val[3], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 352)
  def _reduce_148(val, _values, result)
            return make_node(:ObjectTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[6], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 356)
  def _reduce_149(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.y', 360)
  def _reduce_151(val, _values, result)
     return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_152(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_153(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 365)
  def _reduce_154(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 366)
  def _reduce_155(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_156(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_157(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1], position_source: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_158(val, _values, result)
            return make_node(:InputValueDefinition, name: val[1], type: val[3], default_value: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_159(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_160(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_161(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_162(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_163(val, _values, result)
            return make_node(:FieldDefinition, name: val[1], arguments: val[2], type: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_164(val, _values, result)
     return EMPTY_ARRAY 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_165(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_166(val, _values, result)
     val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_167(val, _values, result)
            return make_node(:InterfaceTypeDefinition, name: val[2], directives: val[3], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_168(val, _values, result)
     return [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_169(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_170(val, _values, result)
            return make_node(:UnionTypeDefinition, name: val[2], directives: val[3], types: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_171(val, _values, result)
             return make_node(:EnumTypeDefinition, name: val[2], directives: val[3], values: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_172(val, _values, result)
            return make_node(:InputObjectTypeDefinition, name: val[2], directives: val[3], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_173(val, _values, result)
            return make_node(:DirectiveDefinition, name: val[3], arguments: val[4], locations: val[6], description: val[0] || get_description(val[1]), definition_line: val[1].line, position_source: val[0] || val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 425)
  def _reduce_174(val, _values, result)
     return [make_node(:DirectiveLocation, name: val[0].to_s, position_source: val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_175(val, _values, result)
     val[0] << make_node(:DirectiveLocation, name: val[2].to_s, position_source: val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Language
  end   # module GraphQL
