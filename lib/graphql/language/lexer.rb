
# line 1 "lib/graphql/language/lexer.rl"

# line 104 "lib/graphql/language/lexer.rl"



module GraphQL
  module Language
    module Lexer
      def self.tokenize(query_string)
        run_lexer(query_string)
      end

      # Replace any escaped unicode or whitespace with the _actual_ characters
      # To avoid allocating more strings, this modifies the string passed into it
      def self.replace_escaped_characters_in_place(raw_string)
        raw_string.gsub!(ESCAPES, ESCAPES_REPLACE)
        raw_string.gsub!(UTF_8, &UTF_8_REPLACE)
        nil
      end

      private

      
# line 27 "lib/graphql/language/lexer.rb"
class << self
	attr_accessor :_graphql_lexer_trans_keys
	private :_graphql_lexer_trans_keys, :_graphql_lexer_trans_keys=
end
self._graphql_lexer_trans_keys = [
	34, 92, 34, 92, 34, 34, 
	34, 34, 34, 34, 48, 
	57, 48, 57, 43, 57, 
	46, 46, 9, 125, 9, 44, 
	34, 92, 34, 92, 34, 
	34, 34, 34, 10, 13, 
	48, 57, 43, 101, 48, 57, 
	43, 101, 43, 101, 46, 
	46, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	0
]

class << self
	attr_accessor :_graphql_lexer_key_spans
	private :_graphql_lexer_key_spans, :_graphql_lexer_key_spans=
end
self._graphql_lexer_key_spans = [
	59, 59, 1, 1, 1, 10, 10, 15, 
	1, 117, 36, 59, 59, 1, 1, 4, 
	10, 59, 10, 59, 59, 1, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75
]

class << self
	attr_accessor :_graphql_lexer_index_offsets
	private :_graphql_lexer_index_offsets, :_graphql_lexer_index_offsets=
end
self._graphql_lexer_index_offsets = [
	0, 60, 120, 122, 124, 126, 137, 148, 
	164, 166, 284, 321, 381, 441, 443, 445, 
	450, 461, 521, 532, 592, 652, 654, 730, 
	806, 882, 958, 1034, 1110, 1186, 1262, 1338, 
	1414, 1490, 1566, 1642, 1718, 1794, 1870, 1946, 
	2022, 2098, 2174, 2250, 2326, 2402, 2478, 2554, 
	2630, 2706, 2782, 2858, 2934, 3010, 3086, 3162, 
	3238, 3314, 3390, 3466, 3542, 3618, 3694, 3770, 
	3846, 3922, 3998, 4074, 4150, 4226, 4302, 4378, 
	4454, 4530, 4606, 4682, 4758, 4834, 4910, 4986, 
	5062, 5138, 5214, 5290, 5366, 5442, 5518, 5594, 
	5670, 5746, 5822, 5898, 5974, 6050, 6126, 6202, 
	6278, 6354, 6430, 6506, 6582, 6658, 6734, 6810
]

class << self
	attr_accessor :_graphql_lexer_indicies
	private :_graphql_lexer_indicies, :_graphql_lexer_indicies=
end
self._graphql_lexer_indicies = [
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	6, 5, 7, 5, 8, 5, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 10, 12, 0, 12, 0, 
	0, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 14, 13, 16, 17, 
	15, 15, 17, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	15, 15, 15, 15, 15, 16, 18, 19, 
	20, 21, 15, 22, 15, 23, 24, 15, 
	15, 16, 25, 26, 15, 27, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 29, 
	15, 15, 30, 15, 15, 31, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	33, 15, 34, 15, 32, 15, 32, 32, 
	32, 35, 36, 37, 32, 32, 38, 32, 
	32, 32, 39, 40, 41, 32, 42, 32, 
	43, 44, 45, 32, 32, 32, 32, 32, 
	46, 47, 48, 15, 16, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 16, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 16, 
	49, 51, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	1, 5, 52, 8, 5, 54, 20, 20, 
	54, 20, 27, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 50, 12, 55, 12, 
	56, 55, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 57, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 57, 
	55, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 58, 12, 58, 12, 58, 
	58, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 57, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 57, 58, 
	12, 55, 12, 56, 55, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 57, 55, 59, 50, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	0, 0, 0, 0, 0, 0, 0, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 0, 0, 0, 0, 32, 0, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 0, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 61, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	62, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 63, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 64, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 65, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 66, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	67, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 68, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	69, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 70, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 71, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 72, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	73, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 74, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 75, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 76, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 77, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 78, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 79, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 80, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 81, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 82, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 83, 84, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 85, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 86, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 87, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 88, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 89, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 90, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 91, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 92, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 93, 32, 32, 32, 94, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 95, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 96, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 97, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 98, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 99, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 100, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 101, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 102, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 103, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 104, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 105, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 106, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 107, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 108, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 109, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 110, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 111, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 112, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 113, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 114, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 115, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 116, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 117, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 118, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 119, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 120, 
	32, 32, 32, 32, 32, 32, 121, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 122, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 123, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 124, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 125, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 126, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 127, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 128, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 129, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 130, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	131, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 132, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 133, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 134, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 135, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 136, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 137, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 138, 32, 32, 32, 
	32, 32, 32, 139, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 140, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 141, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 142, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 143, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 144, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 145, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	60, 60, 60, 60, 60, 60, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 60, 60, 60, 32, 60, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 146, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 60, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 60, 60, 60, 60, 
	60, 60, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 60, 60, 
	60, 32, 60, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 32, 32, 32, 
	147, 32, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 32, 60, 0
]

class << self
	attr_accessor :_graphql_lexer_trans_targs
	private :_graphql_lexer_trans_targs, :_graphql_lexer_trans_targs=
end
self._graphql_lexer_trans_targs = [
	9, 0, 9, 1, 12, 2, 3, 4, 
	14, 18, 9, 19, 5, 9, 9, 9, 
	10, 9, 9, 11, 15, 9, 9, 9, 
	9, 16, 21, 17, 20, 9, 9, 9, 
	22, 9, 9, 23, 31, 34, 44, 62, 
	69, 72, 73, 77, 95, 100, 9, 9, 
	9, 9, 9, 13, 9, 9, 9, 9, 
	6, 7, 9, 8, 9, 24, 25, 26, 
	27, 28, 29, 30, 22, 32, 33, 22, 
	35, 38, 36, 37, 22, 39, 40, 41, 
	42, 43, 22, 45, 53, 46, 47, 48, 
	49, 50, 51, 52, 22, 54, 56, 55, 
	22, 57, 58, 59, 60, 61, 22, 63, 
	64, 65, 66, 67, 68, 22, 70, 71, 
	22, 22, 74, 75, 76, 22, 78, 85, 
	79, 82, 80, 81, 22, 83, 84, 22, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 22, 96, 98, 97, 22, 99, 22, 
	101, 102, 103, 22
]

class << self
	attr_accessor :_graphql_lexer_trans_actions
	private :_graphql_lexer_trans_actions, :_graphql_lexer_trans_actions=
end
self._graphql_lexer_trans_actions = [
	1, 0, 2, 0, 3, 0, 0, 0, 
	4, 0, 5, 6, 0, 7, 8, 11, 
	0, 12, 13, 14, 0, 15, 16, 17, 
	18, 0, 19, 20, 20, 21, 22, 23, 
	24, 25, 26, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 28, 
	29, 30, 31, 3, 32, 33, 34, 35, 
	0, 0, 36, 0, 37, 0, 0, 0, 
	0, 0, 0, 0, 38, 0, 0, 39, 
	0, 0, 0, 0, 40, 0, 0, 0, 
	0, 0, 41, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 42, 0, 0, 0, 
	43, 0, 0, 0, 0, 0, 44, 0, 
	0, 0, 0, 0, 0, 45, 0, 0, 
	46, 47, 0, 0, 0, 48, 0, 0, 
	0, 0, 0, 0, 49, 0, 0, 50, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 51, 0, 0, 0, 52, 0, 53, 
	0, 0, 0, 54
]

class << self
	attr_accessor :_graphql_lexer_to_state_actions
	private :_graphql_lexer_to_state_actions, :_graphql_lexer_to_state_actions=
end
self._graphql_lexer_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_graphql_lexer_from_state_actions
	private :_graphql_lexer_from_state_actions, :_graphql_lexer_from_state_actions=
end
self._graphql_lexer_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 10, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_graphql_lexer_eof_trans
	private :_graphql_lexer_eof_trans, :_graphql_lexer_eof_trans=
end
self._graphql_lexer_eof_trans = [
	1, 1, 1, 1, 1, 1, 11, 1, 
	14, 0, 50, 51, 53, 53, 54, 55, 
	51, 56, 59, 59, 56, 51, 1, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61, 
	61, 61, 61, 61, 61, 61, 61, 61
]

class << self
	attr_accessor :graphql_lexer_start
end
self.graphql_lexer_start = 9;
class << self
	attr_accessor :graphql_lexer_first_final
end
self.graphql_lexer_first_final = 9;
class << self
	attr_accessor :graphql_lexer_error
end
self.graphql_lexer_error = -1;

class << self
	attr_accessor :graphql_lexer_en_main
end
self.graphql_lexer_en_main = 9;


# line 125 "lib/graphql/language/lexer.rl"

      def self.run_lexer(query_string)
        data = query_string.unpack("c*")
        eof = data.length

        # Since `Lexer` is a module, store all lexer state
        # in this local variable:
        meta = {
          line: 1,
          col: 1,
          data: data,
          tokens: [],
          previous_token: nil,
        }

        p ||= 0
        pe ||= data.length

        
# line 1134 "lib/graphql/language/lexer.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = graphql_lexer_start
	ts = nil
	te = nil
	act = 0
end

# line 144 "lib/graphql/language/lexer.rl"

        
# line 1147 "lib/graphql/language/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	end
	if _goto_level <= _resume
	case _graphql_lexer_from_state_actions[cs] 
	when 10 then
# line 1 "NONE"
		begin
ts = p
		end
# line 1171 "lib/graphql/language/lexer.rb"
	end
	_keys = cs << 1
	_inds = _graphql_lexer_index_offsets[cs]
	_slen = _graphql_lexer_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_graphql_lexer_trans_keys[_keys] <= _wide && 
			_wide <= _graphql_lexer_trans_keys[_keys + 1] 
		    ) then
			_graphql_lexer_indicies[ _inds + _wide - _graphql_lexer_trans_keys[_keys] ] 
		 else 
			_graphql_lexer_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	cs = _graphql_lexer_trans_targs[_trans]
	if _graphql_lexer_trans_actions[_trans] != 0
	case _graphql_lexer_trans_actions[_trans]
	when 19 then
# line 1 "NONE"
		begin
te = p+1
		end
	when 29 then
# line 75 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RCURLY, ts, te, meta)  end
		end
	when 27 then
# line 76 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LCURLY, ts, te, meta)  end
		end
	when 18 then
# line 77 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RPAREN, ts, te, meta)  end
		end
	when 17 then
# line 78 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LPAREN, ts, te, meta)  end
		end
	when 26 then
# line 79 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RBRACKET, ts, te, meta)  end
		end
	when 25 then
# line 80 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LBRACKET, ts, te, meta)  end
		end
	when 21 then
# line 81 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:COLON, ts, te, meta)  end
		end
	when 2 then
# line 82 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit_string(ts, te, meta, block: false)  end
		end
	when 15 then
# line 84 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:VAR_SIGN, ts, te, meta)  end
		end
	when 23 then
# line 85 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:DIR_SIGN, ts, te, meta)  end
		end
	when 8 then
# line 86 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:ELLIPSIS, ts, te, meta)  end
		end
	when 22 then
# line 87 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:EQUALS, ts, te, meta)  end
		end
	when 13 then
# line 88 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:BANG, ts, te, meta)  end
		end
	when 28 then
# line 89 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:PIPE, ts, te, meta)  end
		end
	when 16 then
# line 90 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:AMP, ts, te, meta)  end
		end
	when 12 then
# line 94 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin 
      meta[:line] += 1
      meta[:col] = 1
     end
		end
	when 11 then
# line 101 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 35 then
# line 56 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:INT, ts, te, meta)  end
		end
	when 36 then
# line 57 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:FLOAT, ts, te, meta)  end
		end
	when 32 then
# line 82 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit_string(ts, te, meta, block: false)  end
		end
	when 33 then
# line 83 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit_string(ts, te, meta, block: true)  end
		end
	when 37 then
# line 91 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:IDENTIFIER, ts, te, meta)  end
		end
	when 34 then
# line 92 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  record_comment(ts, te, meta)  end
		end
	when 30 then
# line 99 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  meta[:col] += te - ts  end
		end
	when 31 then
# line 101 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 5 then
# line 56 "lib/graphql/language/lexer.rl"
		begin
 begin p = ((te))-1; end
 begin  emit(:INT, ts, te, meta)  end
		end
	when 7 then
# line 101 "lib/graphql/language/lexer.rl"
		begin
 begin p = ((te))-1; end
 begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 1 then
# line 1 "NONE"
		begin
	case act
	when 1 then
	begin begin p = ((te))-1; end
 emit(:INT, ts, te, meta) end
	when 2 then
	begin begin p = ((te))-1; end
 emit(:FLOAT, ts, te, meta) end
	when 3 then
	begin begin p = ((te))-1; end
 emit(:ON, ts, te, meta) end
	when 4 then
	begin begin p = ((te))-1; end
 emit(:FRAGMENT, ts, te, meta) end
	when 5 then
	begin begin p = ((te))-1; end
 emit(:TRUE, ts, te, meta) end
	when 6 then
	begin begin p = ((te))-1; end
 emit(:FALSE, ts, te, meta) end
	when 7 then
	begin begin p = ((te))-1; end
 emit(:NULL, ts, te, meta) end
	when 8 then
	begin begin p = ((te))-1; end
 emit(:QUERY, ts, te, meta) end
	when 9 then
	begin begin p = ((te))-1; end
 emit(:MUTATION, ts, te, meta) end
	when 10 then
	begin begin p = ((te))-1; end
 emit(:SUBSCRIPTION, ts, te, meta) end
	when 11 then
	begin begin p = ((te))-1; end
 emit(:SCHEMA, ts, te, meta) end
	when 12 then
	begin begin p = ((te))-1; end
 emit(:SCALAR, ts, te, meta) end
	when 13 then
	begin begin p = ((te))-1; end
 emit(:TYPE, ts, te, meta) end
	when 14 then
	begin begin p = ((te))-1; end
 emit(:IMPLEMENTS, ts, te, meta) end
	when 15 then
	begin begin p = ((te))-1; end
 emit(:INTERFACE, ts, te, meta) end
	when 16 then
	begin begin p = ((te))-1; end
 emit(:UNION, ts, te, meta) end
	when 17 then
	begin begin p = ((te))-1; end
 emit(:ENUM, ts, te, meta) end
	when 18 then
	begin begin p = ((te))-1; end
 emit(:INPUT, ts, te, meta) end
	when 19 then
	begin begin p = ((te))-1; end
 emit(:DIRECTIVE, ts, te, meta) end
	when 27 then
	begin begin p = ((te))-1; end
 emit_string(ts, te, meta, block: false) end
	when 28 then
	begin begin p = ((te))-1; end
 emit_string(ts, te, meta, block: true) end
	when 36 then
	begin begin p = ((te))-1; end
 emit(:IDENTIFIER, ts, te, meta) end
	when 40 then
	begin begin p = ((te))-1; end
 emit(:UNKNOWN_CHAR, ts, te, meta) end
end 
			end
	when 20 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 56 "lib/graphql/language/lexer.rl"
		begin
act = 1;		end
	when 6 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 57 "lib/graphql/language/lexer.rl"
		begin
act = 2;		end
	when 47 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 58 "lib/graphql/language/lexer.rl"
		begin
act = 3;		end
	when 41 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 59 "lib/graphql/language/lexer.rl"
		begin
act = 4;		end
	when 52 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 60 "lib/graphql/language/lexer.rl"
		begin
act = 5;		end
	when 40 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 61 "lib/graphql/language/lexer.rl"
		begin
act = 6;		end
	when 46 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 62 "lib/graphql/language/lexer.rl"
		begin
act = 7;		end
	when 48 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 63 "lib/graphql/language/lexer.rl"
		begin
act = 8;		end
	when 45 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 64 "lib/graphql/language/lexer.rl"
		begin
act = 9;		end
	when 51 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 65 "lib/graphql/language/lexer.rl"
		begin
act = 10;		end
	when 50 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 66 "lib/graphql/language/lexer.rl"
		begin
act = 11;		end
	when 49 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 67 "lib/graphql/language/lexer.rl"
		begin
act = 12;		end
	when 53 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 68 "lib/graphql/language/lexer.rl"
		begin
act = 13;		end
	when 42 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 69 "lib/graphql/language/lexer.rl"
		begin
act = 14;		end
	when 44 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 70 "lib/graphql/language/lexer.rl"
		begin
act = 15;		end
	when 54 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 71 "lib/graphql/language/lexer.rl"
		begin
act = 16;		end
	when 39 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 72 "lib/graphql/language/lexer.rl"
		begin
act = 17;		end
	when 43 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 73 "lib/graphql/language/lexer.rl"
		begin
act = 18;		end
	when 38 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 74 "lib/graphql/language/lexer.rl"
		begin
act = 19;		end
	when 3 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 82 "lib/graphql/language/lexer.rl"
		begin
act = 27;		end
	when 4 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 83 "lib/graphql/language/lexer.rl"
		begin
act = 28;		end
	when 24 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 91 "lib/graphql/language/lexer.rl"
		begin
act = 36;		end
	when 14 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 101 "lib/graphql/language/lexer.rl"
		begin
act = 40;		end
# line 1619 "lib/graphql/language/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _graphql_lexer_to_state_actions[cs] 
	when 9 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 1629 "lib/graphql/language/lexer.rb"
	end

	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _graphql_lexer_eof_trans[cs] > 0
		_trans = _graphql_lexer_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 146 "lib/graphql/language/lexer.rl"

        meta[:tokens]
      end

      def self.record_comment(ts, te, meta)
        token = GraphQL::Language::Token.new(
          name: :COMMENT,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )

        meta[:previous_token] = token

        meta[:col] += te - ts
      end

      def self.emit(token_name, ts, te, meta)
        meta[:tokens] << token = GraphQL::Language::Token.new(
          name: token_name,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )
        meta[:previous_token] = token
        # Bump the column counter for the next token
        meta[:col] += te - ts
      end

      ESCAPES = /\\["\\\/bfnrt]/
      ESCAPES_REPLACE = {
        '\\"' => '"',
        "\\\\" => "\\",
        "\\/" => '/',
        "\\b" => "\b",
        "\\f" => "\f",
        "\\n" => "\n",
        "\\r" => "\r",
        "\\t" => "\t",
      }

      UTF_8 = /\\u[\dAa-f]{4}/i
      UTF_8_REPLACE = ->(m) { [m[-4..-1].to_i(16)].pack('U'.freeze) }

      VALID_STRING = /\A(?:[^\\]|#{ESCAPES}|#{UTF_8})*\z/o

      PACK_DIRECTIVE = "c*"
      UTF_8_ENCODING = "UTF-8"

      def self.emit_string(ts, te, meta, block:)
        quotes_length = block ? 3 : 1
        ts += quotes_length
        value = meta[:data][ts...te - quotes_length].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING)
        if block
          value = GraphQL::Language::BlockString.trim_whitespace(value)
        end
        if value !~ VALID_STRING
          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :BAD_UNICODE_ESCAPE,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        else
          replace_escaped_characters_in_place(value)

          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :STRING,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        end

        meta[:previous_token] = token
        meta[:col] += te - ts
      end
    end
  end
end
