
# line 1 "lib/graphql/language/lexer.rl"

# line 98 "lib/graphql/language/lexer.rl"



module GraphQL
  module Language
    module Lexer
      def self.tokenize(query_string)
        run_lexer(query_string)
      end

      # Replace any escaped unicode or whitespace with the _actual_ characters
      # To avoid allocating more strings, this modifies the string passed into it
      def self.replace_escaped_characters_in_place(raw_string)
        raw_string.gsub!(ESCAPES, ESCAPES_REPLACE)
        raw_string.gsub!(UTF_8, &UTF_8_REPLACE)
        nil
      end

      private

      
# line 27 "lib/graphql/language/lexer.rb"
class << self
	attr_accessor :_graphql_lexer_trans_keys
	private :_graphql_lexer_trans_keys, :_graphql_lexer_trans_keys=
end
self._graphql_lexer_trans_keys = [
	34, 92, 34, 92, 48, 57, 
	48, 57, 43, 57, 46, 
	46, 9, 125, 9, 44, 
	34, 92, 10, 13, 48, 57, 
	43, 101, 48, 57, 43, 
	101, 43, 101, 46, 46, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 122, 
	48, 122, 48, 122, 48, 
	122, 48, 122, 48, 122, 
	48, 122, 48, 122, 0
]

class << self
	attr_accessor :_graphql_lexer_key_spans
	private :_graphql_lexer_key_spans, :_graphql_lexer_key_spans=
end
self._graphql_lexer_key_spans = [
	59, 59, 10, 10, 15, 1, 117, 36, 
	59, 4, 10, 59, 10, 59, 59, 1, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75
]

class << self
	attr_accessor :_graphql_lexer_index_offsets
	private :_graphql_lexer_index_offsets, :_graphql_lexer_index_offsets=
end
self._graphql_lexer_index_offsets = [
	0, 60, 120, 131, 142, 158, 160, 278, 
	315, 375, 380, 391, 451, 462, 522, 582, 
	584, 660, 736, 812, 888, 964, 1040, 1116, 
	1192, 1268, 1344, 1420, 1496, 1572, 1648, 1724, 
	1800, 1876, 1952, 2028, 2104, 2180, 2256, 2332, 
	2408, 2484, 2560, 2636, 2712, 2788, 2864, 2940, 
	3016, 3092, 3168, 3244, 3320, 3396, 3472, 3548, 
	3624, 3700, 3776, 3852, 3928, 4004, 4080, 4156, 
	4232, 4308, 4384, 4460, 4536, 4612, 4688, 4764, 
	4840, 4916, 4992, 5068, 5144, 5220, 5296, 5372, 
	5448, 5524, 5600, 5676, 5752, 5828, 5904, 5980, 
	6056, 6132, 6208, 6284, 6360, 6436, 6512, 6588, 
	6664, 6740
]

class << self
	attr_accessor :_graphql_lexer_indicies
	private :_graphql_lexer_indicies, :_graphql_lexer_indicies=
end
self._graphql_lexer_indicies = [
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 0, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 6, 8, 0, 
	8, 0, 0, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 0, 10, 9, 
	12, 13, 11, 11, 13, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 12, 
	14, 15, 16, 17, 11, 11, 11, 18, 
	19, 11, 11, 12, 20, 21, 11, 22, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 24, 11, 11, 25, 11, 11, 26, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 28, 11, 29, 11, 27, 11, 
	27, 27, 27, 30, 31, 32, 27, 27, 
	33, 27, 27, 27, 34, 35, 36, 27, 
	37, 27, 38, 39, 40, 27, 27, 27, 
	27, 27, 41, 42, 43, 11, 12, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 12, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 12, 44, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 1, 45, 
	16, 16, 45, 16, 22, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 46, 8, 
	47, 8, 48, 47, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 49, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 49, 47, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 50, 8, 50, 
	8, 50, 50, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	49, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	49, 50, 8, 47, 8, 48, 47, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 49, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 49, 47, 51, 46, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 0, 0, 0, 0, 0, 0, 
	0, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 0, 0, 0, 0, 27, 
	0, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 0, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 53, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 54, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 55, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 56, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	57, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 58, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 59, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 60, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 61, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 62, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 63, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 64, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 65, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	66, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 67, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 68, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 69, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 70, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 71, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 72, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 73, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	74, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 75, 76, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 77, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 78, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 79, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 80, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 81, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 82, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	83, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 84, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 85, 27, 27, 27, 
	86, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 87, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	88, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 89, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 90, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 91, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 92, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 93, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 94, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 95, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	96, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 97, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	98, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 99, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 100, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 101, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 102, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 103, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	104, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 105, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 106, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 107, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 108, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 109, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 110, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 111, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 112, 27, 27, 27, 27, 27, 27, 
	113, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	114, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 115, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 116, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 117, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 118, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 119, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 120, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 121, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 122, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 123, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 124, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	125, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	126, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 127, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 128, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 129, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 130, 27, 
	27, 27, 27, 27, 27, 131, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 132, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 133, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	134, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 135, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 136, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 137, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 52, 52, 52, 52, 52, 52, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 52, 52, 52, 27, 
	52, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 138, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 52, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 52, 52, 
	52, 52, 52, 52, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	52, 52, 52, 27, 52, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 139, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 52, 
	0
]

class << self
	attr_accessor :_graphql_lexer_trans_targs
	private :_graphql_lexer_trans_targs, :_graphql_lexer_trans_targs=
end
self._graphql_lexer_trans_targs = [
	6, 0, 6, 1, 8, 12, 6, 13, 
	2, 6, 6, 6, 7, 6, 6, 8, 
	9, 6, 6, 6, 10, 15, 11, 14, 
	6, 6, 6, 16, 6, 6, 17, 25, 
	28, 38, 56, 63, 66, 67, 71, 89, 
	94, 6, 6, 6, 6, 6, 6, 6, 
	3, 4, 6, 5, 6, 18, 19, 20, 
	21, 22, 23, 24, 16, 26, 27, 16, 
	29, 32, 30, 31, 16, 33, 34, 35, 
	36, 37, 16, 39, 47, 40, 41, 42, 
	43, 44, 45, 46, 16, 48, 50, 49, 
	16, 51, 52, 53, 54, 55, 16, 57, 
	58, 59, 60, 61, 62, 16, 64, 65, 
	16, 16, 68, 69, 70, 16, 72, 79, 
	73, 76, 74, 75, 16, 77, 78, 16, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 16, 90, 92, 91, 16, 93, 16, 
	95, 96, 97, 16
]

class << self
	attr_accessor :_graphql_lexer_trans_actions
	private :_graphql_lexer_trans_actions, :_graphql_lexer_trans_actions=
end
self._graphql_lexer_trans_actions = [
	1, 0, 2, 0, 3, 0, 4, 5, 
	0, 6, 7, 10, 0, 11, 12, 13, 
	0, 14, 15, 16, 0, 17, 18, 18, 
	19, 20, 21, 22, 23, 24, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 26, 27, 28, 29, 30, 31, 
	0, 0, 32, 0, 33, 0, 0, 0, 
	0, 0, 0, 0, 34, 0, 0, 35, 
	0, 0, 0, 0, 36, 0, 0, 0, 
	0, 0, 37, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 38, 0, 0, 0, 
	39, 0, 0, 0, 0, 0, 40, 0, 
	0, 0, 0, 0, 0, 41, 0, 0, 
	42, 43, 0, 0, 0, 44, 0, 0, 
	0, 0, 0, 0, 45, 0, 0, 46, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 47, 0, 0, 0, 48, 0, 49, 
	0, 0, 0, 50
]

class << self
	attr_accessor :_graphql_lexer_to_state_actions
	private :_graphql_lexer_to_state_actions, :_graphql_lexer_to_state_actions=
end
self._graphql_lexer_to_state_actions = [
	0, 0, 0, 0, 0, 0, 8, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_graphql_lexer_from_state_actions
	private :_graphql_lexer_from_state_actions, :_graphql_lexer_from_state_actions=
end
self._graphql_lexer_from_state_actions = [
	0, 0, 0, 0, 0, 0, 9, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_graphql_lexer_eof_trans
	private :_graphql_lexer_eof_trans, :_graphql_lexer_eof_trans=
end
self._graphql_lexer_eof_trans = [
	1, 1, 1, 7, 1, 10, 0, 45, 
	1, 46, 47, 48, 51, 51, 48, 47, 
	1, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53
]

class << self
	attr_accessor :graphql_lexer_start
end
self.graphql_lexer_start = 6;
class << self
	attr_accessor :graphql_lexer_first_final
end
self.graphql_lexer_first_final = 6;
class << self
	attr_accessor :graphql_lexer_error
end
self.graphql_lexer_error = -1;

class << self
	attr_accessor :graphql_lexer_en_main
end
self.graphql_lexer_en_main = 6;


# line 119 "lib/graphql/language/lexer.rl"

      def self.run_lexer(query_string)
        data = query_string.unpack("c*")
        eof = data.length

        # Since `Lexer` is a module, store all lexer state
        # in this local variable:
        meta = {
          line: 1,
          col: 1,
          data: data,
          tokens: [],
          previous_token: nil,
        }

        p ||= 0
        pe ||= data.length

        
# line 1121 "lib/graphql/language/lexer.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = graphql_lexer_start
	ts = nil
	te = nil
	act = 0
end

# line 138 "lib/graphql/language/lexer.rl"

        
# line 1134 "lib/graphql/language/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	end
	if _goto_level <= _resume
	case _graphql_lexer_from_state_actions[cs] 
	when 9 then
# line 1 "NONE"
		begin
ts = p
		end
# line 1158 "lib/graphql/language/lexer.rb"
	end
	_keys = cs << 1
	_inds = _graphql_lexer_index_offsets[cs]
	_slen = _graphql_lexer_key_spans[cs]
	_wide = data[p].ord
	_trans = if (   _slen > 0 && 
			_graphql_lexer_trans_keys[_keys] <= _wide && 
			_wide <= _graphql_lexer_trans_keys[_keys + 1] 
		    ) then
			_graphql_lexer_indicies[ _inds + _wide - _graphql_lexer_trans_keys[_keys] ] 
		 else 
			_graphql_lexer_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	cs = _graphql_lexer_trans_targs[_trans]
	if _graphql_lexer_trans_actions[_trans] != 0
	case _graphql_lexer_trans_actions[_trans]
	when 17 then
# line 1 "NONE"
		begin
te = p+1
		end
	when 27 then
# line 71 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RCURLY, ts, te, meta)  end
		end
	when 25 then
# line 72 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LCURLY, ts, te, meta)  end
		end
	when 16 then
# line 73 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RPAREN, ts, te, meta)  end
		end
	when 15 then
# line 74 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LPAREN, ts, te, meta)  end
		end
	when 24 then
# line 75 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:RBRACKET, ts, te, meta)  end
		end
	when 23 then
# line 76 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:LBRACKET, ts, te, meta)  end
		end
	when 19 then
# line 77 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:COLON, ts, te, meta)  end
		end
	when 2 then
# line 78 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit_string(ts + 1, te - 1, meta)  end
		end
	when 14 then
# line 79 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:VAR_SIGN, ts, te, meta)  end
		end
	when 21 then
# line 80 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:DIR_SIGN, ts, te, meta)  end
		end
	when 7 then
# line 81 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:ELLIPSIS, ts, te, meta)  end
		end
	when 20 then
# line 82 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:EQUALS, ts, te, meta)  end
		end
	when 12 then
# line 83 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:BANG, ts, te, meta)  end
		end
	when 26 then
# line 84 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:PIPE, ts, te, meta)  end
		end
	when 11 then
# line 88 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin 
      meta[:line] += 1
      meta[:col] = 1
     end
		end
	when 10 then
# line 95 "lib/graphql/language/lexer.rl"
		begin
te = p+1
 begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 31 then
# line 52 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:INT, ts, te, meta)  end
		end
	when 32 then
# line 53 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:FLOAT, ts, te, meta)  end
		end
	when 33 then
# line 85 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:IDENTIFIER, ts, te, meta)  end
		end
	when 29 then
# line 86 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  record_comment(ts, te, meta)  end
		end
	when 28 then
# line 93 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  meta[:col] += te - ts  end
		end
	when 30 then
# line 95 "lib/graphql/language/lexer.rl"
		begin
te = p
p = p - 1; begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 4 then
# line 52 "lib/graphql/language/lexer.rl"
		begin
 begin p = ((te))-1; end
 begin  emit(:INT, ts, te, meta)  end
		end
	when 6 then
# line 95 "lib/graphql/language/lexer.rl"
		begin
 begin p = ((te))-1; end
 begin  emit(:UNKNOWN_CHAR, ts, te, meta)  end
		end
	when 1 then
# line 1 "NONE"
		begin
	case act
	when 1 then
	begin begin p = ((te))-1; end
 emit(:INT, ts, te, meta) end
	when 2 then
	begin begin p = ((te))-1; end
 emit(:FLOAT, ts, te, meta) end
	when 3 then
	begin begin p = ((te))-1; end
 emit(:ON, ts, te, meta) end
	when 4 then
	begin begin p = ((te))-1; end
 emit(:FRAGMENT, ts, te, meta) end
	when 5 then
	begin begin p = ((te))-1; end
 emit(:TRUE, ts, te, meta) end
	when 6 then
	begin begin p = ((te))-1; end
 emit(:FALSE, ts, te, meta) end
	when 7 then
	begin begin p = ((te))-1; end
 emit(:NULL, ts, te, meta) end
	when 8 then
	begin begin p = ((te))-1; end
 emit(:QUERY, ts, te, meta) end
	when 9 then
	begin begin p = ((te))-1; end
 emit(:MUTATION, ts, te, meta) end
	when 10 then
	begin begin p = ((te))-1; end
 emit(:SUBSCRIPTION, ts, te, meta) end
	when 11 then
	begin begin p = ((te))-1; end
 emit(:SCHEMA, ts, te, meta) end
	when 12 then
	begin begin p = ((te))-1; end
 emit(:SCALAR, ts, te, meta) end
	when 13 then
	begin begin p = ((te))-1; end
 emit(:TYPE, ts, te, meta) end
	when 14 then
	begin begin p = ((te))-1; end
 emit(:IMPLEMENTS, ts, te, meta) end
	when 15 then
	begin begin p = ((te))-1; end
 emit(:INTERFACE, ts, te, meta) end
	when 16 then
	begin begin p = ((te))-1; end
 emit(:UNION, ts, te, meta) end
	when 17 then
	begin begin p = ((te))-1; end
 emit(:ENUM, ts, te, meta) end
	when 18 then
	begin begin p = ((te))-1; end
 emit(:INPUT, ts, te, meta) end
	when 19 then
	begin begin p = ((te))-1; end
 emit(:DIRECTIVE, ts, te, meta) end
	when 27 then
	begin begin p = ((te))-1; end
 emit_string(ts + 1, te - 1, meta) end
	when 34 then
	begin begin p = ((te))-1; end
 emit(:IDENTIFIER, ts, te, meta) end
	when 38 then
	begin begin p = ((te))-1; end
 emit(:UNKNOWN_CHAR, ts, te, meta) end
end 
			end
	when 18 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 52 "lib/graphql/language/lexer.rl"
		begin
act = 1;		end
	when 5 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 53 "lib/graphql/language/lexer.rl"
		begin
act = 2;		end
	when 43 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 54 "lib/graphql/language/lexer.rl"
		begin
act = 3;		end
	when 37 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 55 "lib/graphql/language/lexer.rl"
		begin
act = 4;		end
	when 48 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 56 "lib/graphql/language/lexer.rl"
		begin
act = 5;		end
	when 36 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 57 "lib/graphql/language/lexer.rl"
		begin
act = 6;		end
	when 42 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 58 "lib/graphql/language/lexer.rl"
		begin
act = 7;		end
	when 44 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 59 "lib/graphql/language/lexer.rl"
		begin
act = 8;		end
	when 41 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 60 "lib/graphql/language/lexer.rl"
		begin
act = 9;		end
	when 47 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 61 "lib/graphql/language/lexer.rl"
		begin
act = 10;		end
	when 46 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 62 "lib/graphql/language/lexer.rl"
		begin
act = 11;		end
	when 45 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 63 "lib/graphql/language/lexer.rl"
		begin
act = 12;		end
	when 49 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 64 "lib/graphql/language/lexer.rl"
		begin
act = 13;		end
	when 38 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 65 "lib/graphql/language/lexer.rl"
		begin
act = 14;		end
	when 40 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 66 "lib/graphql/language/lexer.rl"
		begin
act = 15;		end
	when 50 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 67 "lib/graphql/language/lexer.rl"
		begin
act = 16;		end
	when 35 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 68 "lib/graphql/language/lexer.rl"
		begin
act = 17;		end
	when 39 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 69 "lib/graphql/language/lexer.rl"
		begin
act = 18;		end
	when 34 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 70 "lib/graphql/language/lexer.rl"
		begin
act = 19;		end
	when 3 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 78 "lib/graphql/language/lexer.rl"
		begin
act = 27;		end
	when 22 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 85 "lib/graphql/language/lexer.rl"
		begin
act = 34;		end
	when 13 then
# line 1 "NONE"
		begin
te = p+1
		end
# line 95 "lib/graphql/language/lexer.rl"
		begin
act = 38;		end
# line 1577 "lib/graphql/language/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _graphql_lexer_to_state_actions[cs] 
	when 8 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 1587 "lib/graphql/language/lexer.rb"
	end

	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _graphql_lexer_eof_trans[cs] > 0
		_trans = _graphql_lexer_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 140 "lib/graphql/language/lexer.rl"

        meta[:tokens]
      end

      def self.record_comment(ts, te, meta)
        token = GraphQL::Language::Token.new(
          name: :COMMENT,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )

        meta[:previous_token] = token

        meta[:col] += te - ts
      end

      def self.emit(token_name, ts, te, meta)
        meta[:tokens] << token = GraphQL::Language::Token.new(
          name: token_name,
          value: meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
          line: meta[:line],
          col: meta[:col],
          prev_token: meta[:previous_token],
        )
        meta[:previous_token] = token
        # Bump the column counter for the next token
        meta[:col] += te - ts
      end

      ESCAPES = /\\["\\\/bfnrt]/
      ESCAPES_REPLACE = {
        '\\"' => '"',
        "\\\\" => "\\",
        "\\/" => '/',
        "\\b" => "\b",
        "\\f" => "\f",
        "\\n" => "\n",
        "\\r" => "\r",
        "\\t" => "\t",
      }

      UTF_8 = /\\u[\dAa-f]{4}/i
      UTF_8_REPLACE = ->(m) { [m[-4..-1].to_i(16)].pack('U'.freeze) }

      VALID_STRING = /\A(?:[^\\]|#{ESCAPES}|#{UTF_8})*\z/o

      PACK_DIRECTIVE = "c*"
      UTF_8_ENCODING = "UTF-8"

      def self.emit_string(ts, te, meta)
        value = meta[:data][ts...te].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING)
        if value !~ VALID_STRING
          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :BAD_UNICODE_ESCAPE,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        else
          replace_escaped_characters_in_place(value)

          meta[:tokens] << token = GraphQL::Language::Token.new(
            name: :STRING,
            value: value,
            line: meta[:line],
            col: meta[:col],
            prev_token: meta[:previous_token],
          )
        end

        meta[:previous_token] = token
        meta[:col] += te - ts
      end
    end
  end
end
